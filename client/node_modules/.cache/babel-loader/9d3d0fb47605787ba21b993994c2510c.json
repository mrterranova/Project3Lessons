{"ast":null,"code":"import { EditorState } from 'draft-js';\nimport { OrderedMap } from 'immutable';\nexport default function getBlocksInSelection(editorState) {\n  let contentState = editorState.getCurrentContent();\n  let blockMap = contentState.getBlockMap();\n  let selection = editorState.getSelection();\n\n  if (selection.isCollapsed()) {\n    return new OrderedMap();\n  }\n\n  let startKey = selection.getStartKey();\n  let endKey = selection.getEndKey();\n\n  if (startKey === endKey) {\n    return new OrderedMap({\n      startKey: contentState.getBlockForKey(startKey)\n    });\n  }\n\n  let blocksUntilEnd = blockMap.takeUntil((block, key) => key === endKey);\n  return blocksUntilEnd.skipUntil((block, key) => key === startKey);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/core/pages/Admin/components/lib/getBlocksInSelection.js"],"names":["EditorState","OrderedMap","getBlocksInSelection","editorState","contentState","getCurrentContent","blockMap","getBlockMap","selection","getSelection","isCollapsed","startKey","getStartKey","endKey","getEndKey","getBlockForKey","blocksUntilEnd","takeUntil","block","key","skipUntil"],"mappings":"AACA,SAAQA,WAAR,QAA0B,UAA1B;AACA,SAAQC,UAAR,QAAyB,WAAzB;AAEA,eAAe,SAASC,oBAAT,CACbC,WADa,EAEA;AACb,MAAIC,YAAY,GAAGD,WAAW,CAACE,iBAAZ,EAAnB;AACA,MAAIC,QAAQ,GAAGF,YAAY,CAACG,WAAb,EAAf;AACA,MAAIC,SAAS,GAAGL,WAAW,CAACM,YAAZ,EAAhB;;AACA,MAAID,SAAS,CAACE,WAAV,EAAJ,EAA6B;AAC3B,WAAO,IAAIT,UAAJ,EAAP;AACD;;AAED,MAAIU,QAAQ,GAAGH,SAAS,CAACI,WAAV,EAAf;AACA,MAAIC,MAAM,GAAGL,SAAS,CAACM,SAAV,EAAb;;AACA,MAAIH,QAAQ,KAAKE,MAAjB,EAAyB;AACvB,WAAO,IAAIZ,UAAJ,CAAe;AAACU,MAAAA,QAAQ,EAAEP,YAAY,CAACW,cAAb,CAA4BJ,QAA5B;AAAX,KAAf,CAAP;AACD;;AACD,MAAIK,cAAc,GAAGV,QAAQ,CAACW,SAAT,CAAmB,CAACC,KAAD,EAAQC,GAAR,KAAgBA,GAAG,KAAKN,MAA3C,CAArB;AACA,SAAOG,cAAc,CAACI,SAAf,CAAyB,CAACF,KAAD,EAAQC,GAAR,KAAgBA,GAAG,KAAKR,QAAjD,CAAP;AACD","sourcesContent":["/* @flow */\nimport {EditorState} from 'draft-js';\nimport {OrderedMap} from 'immutable';\n\nexport default function getBlocksInSelection(\n  editorState: EditorState,\n): EditorState {\n  let contentState = editorState.getCurrentContent();\n  let blockMap = contentState.getBlockMap();\n  let selection = editorState.getSelection();\n  if (selection.isCollapsed()) {\n    return new OrderedMap();\n  }\n\n  let startKey = selection.getStartKey();\n  let endKey = selection.getEndKey();\n  if (startKey === endKey) {\n    return new OrderedMap({startKey: contentState.getBlockForKey(startKey)});\n  }\n  let blocksUntilEnd = blockMap.takeUntil((block, key) => key === endKey);\n  return blocksUntilEnd.skipUntil((block, key) => key === startKey);\n}\n"]},"metadata":{},"sourceType":"module"}