{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.containsFiles = containsFiles;\nexports.readFile = readFile;\nexports.readFiles = readFiles; // Check if drag event contains files (not text)\n\nfunction containsFiles(event) {\n  if (event.dataTransfer.types) {\n    for (var i = 0; i < event.dataTransfer.types.length; i++) {\n      if (event.dataTransfer.types[i] === 'Files') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n} // Read file contents intelligently as plain text/json, image as dataUrl or\n// anything else as binary\n\n\nfunction readFile(file) {\n  return new Promise(function (resolve) {\n    var reader = new FileReader(); // This is called when finished reading\n\n    reader.onload = function (event) {\n      // Return an array with one image\n      resolve({\n        // These are attributes like size, name, type, ...\n        lastModifiedDate: file.lastModifiedDate,\n        lastModified: file.lastModified,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        // This is the files content as base64\n        src: event.target.result,\n        // No URL, since nothing on server\n        url: null\n      });\n    };\n\n    if (file.type.indexOf('text/') === 0 || file.type === 'application/json') {\n      reader.readAsText(file);\n    } else if (file.type.indexOf('image/') === 0) {\n      reader.readAsDataURL(file);\n    } else {\n      reader.readAsBinaryString(file);\n    }\n  });\n} // Read multiple files using above function\n\n\nfunction readFiles(files) {\n  return Promise.all(files.map(readFile));\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/node_modules/draft-js-dnd-plugin/lib/utils/file.js"],"names":["Object","defineProperty","exports","value","containsFiles","readFile","readFiles","event","dataTransfer","types","i","length","file","Promise","resolve","reader","FileReader","onload","lastModifiedDate","lastModified","name","size","type","src","target","result","url","indexOf","readAsText","readAsDataURL","readAsBinaryString","files","all","map"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,QAAR,GAAmBA,QAAnB;AACAH,OAAO,CAACI,SAAR,GAAoBA,SAApB,C,CACA;;AACA,SAASF,aAAT,CAAuBG,KAAvB,EAA8B;AAC5B,MAAIA,KAAK,CAACC,YAAN,CAAmBC,KAAvB,EAA8B;AAC5B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACC,YAAN,CAAmBC,KAAnB,CAAyBE,MAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACxD,UAAIH,KAAK,CAACC,YAAN,CAAmBC,KAAnB,CAAyBC,CAAzB,MAAgC,OAApC,EAA6C;AAC3C,eAAO,IAAP;AACD;AACF;AACF;;AAED,SAAO,KAAP;AACD,C,CAED;AACA;;;AACA,SAASL,QAAT,CAAkBO,IAAlB,EAAwB;AACtB,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpC,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb,CADoC,CAGpC;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,UAAUV,KAAV,EAAiB;AAC/B;AACAO,MAAAA,OAAO,CAAC;AACN;AACAI,QAAAA,gBAAgB,EAAEN,IAAI,CAACM,gBAFjB;AAGNC,QAAAA,YAAY,EAAEP,IAAI,CAACO,YAHb;AAINC,QAAAA,IAAI,EAAER,IAAI,CAACQ,IAJL;AAKNC,QAAAA,IAAI,EAAET,IAAI,CAACS,IALL;AAMNC,QAAAA,IAAI,EAAEV,IAAI,CAACU,IANL;AAQN;AACAC,QAAAA,GAAG,EAAEhB,KAAK,CAACiB,MAAN,CAAaC,MATZ;AAWN;AACAC,QAAAA,GAAG,EAAE;AAZC,OAAD,CAAP;AAcD,KAhBD;;AAkBA,QAAId,IAAI,CAACU,IAAL,CAAUK,OAAV,CAAkB,OAAlB,MAA+B,CAA/B,IAAoCf,IAAI,CAACU,IAAL,KAAc,kBAAtD,EAA0E;AACxEP,MAAAA,MAAM,CAACa,UAAP,CAAkBhB,IAAlB;AACD,KAFD,MAEO,IAAIA,IAAI,CAACU,IAAL,CAAUK,OAAV,CAAkB,QAAlB,MAAgC,CAApC,EAAuC;AAC5CZ,MAAAA,MAAM,CAACc,aAAP,CAAqBjB,IAArB;AACD,KAFM,MAEA;AACLG,MAAAA,MAAM,CAACe,kBAAP,CAA0BlB,IAA1B;AACD;AACF,GA7BM,CAAP;AA8BD,C,CAED;;;AACA,SAASN,SAAT,CAAmByB,KAAnB,EAA0B;AACxB,SAAOlB,OAAO,CAACmB,GAAR,CAAYD,KAAK,CAACE,GAAN,CAAU5B,QAAV,CAAZ,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.containsFiles = containsFiles;\nexports.readFile = readFile;\nexports.readFiles = readFiles;\n// Check if drag event contains files (not text)\nfunction containsFiles(event) {\n  if (event.dataTransfer.types) {\n    for (var i = 0; i < event.dataTransfer.types.length; i++) {\n      if (event.dataTransfer.types[i] === 'Files') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// Read file contents intelligently as plain text/json, image as dataUrl or\n// anything else as binary\nfunction readFile(file) {\n  return new Promise(function (resolve) {\n    var reader = new FileReader();\n\n    // This is called when finished reading\n    reader.onload = function (event) {\n      // Return an array with one image\n      resolve({\n        // These are attributes like size, name, type, ...\n        lastModifiedDate: file.lastModifiedDate,\n        lastModified: file.lastModified,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n\n        // This is the files content as base64\n        src: event.target.result,\n\n        // No URL, since nothing on server\n        url: null\n      });\n    };\n\n    if (file.type.indexOf('text/') === 0 || file.type === 'application/json') {\n      reader.readAsText(file);\n    } else if (file.type.indexOf('image/') === 0) {\n      reader.readAsDataURL(file);\n    } else {\n      reader.readAsBinaryString(file);\n    }\n  });\n}\n\n// Read multiple files using above function\nfunction readFiles(files) {\n  return Promise.all(files.map(readFile));\n}"]},"metadata":{},"sourceType":"script"}