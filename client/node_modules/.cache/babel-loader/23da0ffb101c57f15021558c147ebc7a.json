{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\src\\\\auth\\\\ResetPassword.js\";\nimport React, { useState, useEffect } from 'react';\nimport Layout from \"../core/Layout\";\nimport axios from 'axios';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport jwt from 'jsonwebtoken';\n\nconst ResetPassword = ({\n  match\n}) => {\n  const _useState = useState({\n    name: '',\n    token: '',\n    newPassword: '',\n    email: '',\n    btnText: 'Update Password'\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        values = _useState2[0],\n        setValues = _useState2[1];\n\n  useEffect(() => {\n    let token = match.params.token;\n\n    let _jwt$decode = jwt.decode(token),\n        name = _jwt$decode.name;\n\n    if (token) {\n      setValues(_objectSpread({}, values, {\n        name,\n        email,\n        token\n      }));\n    }\n  }, []);\n  const name = values.name,\n        email = values.email,\n        token = values.token,\n        newPassword = values.newPassword,\n        btnText = values.btnText;\n\n  const handleChange = event => {\n    setValues(_objectSpread({}, values, {\n      newPassword: event.target.value\n    }));\n  };\n\n  const handleSubmitForm = event => {\n    event.preventDefault();\n    setValues(_objectSpread({}, values, {\n      btnText: \"Reseting\"\n    }));\n    axios({\n      method: \"PUT\",\n      url: process.env.REACT_APP_API + '/reset-password',\n      data: {\n        newPassword,\n        resetPasswordLink: token\n      }\n    }).then(response => {\n      console.log(\"Reset Completed\", response);\n      toast.success(response.data.message);\n      setValues(_objectSpread({}, values, {\n        btnText: \"Completed Reset\"\n      }));\n    }).catch(error => {\n      console.log('Error in reset password request', error.response.data);\n      setValues(_objectSpread({}, values, {\n        btnText: 'Reset Password'\n      }));\n      toast.error(error.response.data.error);\n    });\n  };\n\n  const resetPasswordForm = () => React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"text-muted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"New Password: \"), React.createElement(\"input\", {\n    onChange: handleChange('newpassword'),\n    value: newPassword,\n    placeholder: \"Enter New Password\",\n    type: \"password\",\n    className: \"form-control\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-warning\",\n    onClick: handleSubmitForm,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, btnText)));\n\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(ToastContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Reseting Password for \", name, \": \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \" Recieved from \", email), resetPasswordForm());\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/auth/ResetPassword.js"],"names":["React","useState","useEffect","Layout","axios","ToastContainer","toast","jwt","ResetPassword","match","name","token","newPassword","email","btnText","values","setValues","params","decode","handleChange","event","target","value","handleSubmitForm","preventDefault","method","url","process","env","REACT_APP_API","data","resetPasswordLink","then","response","console","log","success","message","catch","error","resetPasswordForm"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Layout from \"../core/Layout\";\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst ResetPassword = ({ match }) => {\r\n    const [values, setValues] = useState({\r\n        name: '',\r\n        token: '', \r\n        newPassword: '',\r\n        email: '',\r\n        btnText: 'Update Password'\r\n    })\r\n\r\n    useEffect (() => {\r\n        let token = match.params.token\r\n        let { name } = jwt.decode(token)\r\n\r\n        if (token) {\r\n            setValues({ ...values, name, email,  token })\r\n        }\r\n    }, [])\r\n\r\n    const { name, email, token, newPassword, btnText } = values\r\n\r\n    const handleChange = event => {\r\n        setValues({ ...values, newPassword: event.target.value })\r\n    }\r\n\r\n    const handleSubmitForm = event => {\r\n        event.preventDefault();\r\n        setValues({ ...values, btnText: \"Reseting\" })\r\n            axios({\r\n                method: \"PUT\",\r\n                url: process.env.REACT_APP_API + '/reset-password',\r\n                data: { newPassword, resetPasswordLink : token }\r\n            }).then(response => {\r\n                console.log(\"Reset Completed\", response)\r\n                \r\n                toast.success(response.data.message)\r\n                setValues({...values, btnText: \"Completed Reset\"})\r\n\r\n            }).catch(error => {\r\n                console.log('Error in reset password request', error.response.data)\r\n                setValues({ ...values, btnText: 'Reset Password' });\r\n                toast.error(error.response.data.error)\r\n            })\r\n    }\r\n\r\n\r\n    const resetPasswordForm = () => (\r\n        <form>\r\n            <div className=\"form-group\" >\r\n                <label className=\"text-muted\">New Password: </label>\r\n                <input onChange={handleChange('newpassword')} value={newPassword} placeholder=\"Enter New Password\" type=\"password\" className=\"form-control\" required/>\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn-warning\" onClick={handleSubmitForm} type=\"submit\">{btnText}</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n    return (\r\n        <Layout>\r\n            <ToastContainer />\r\n    <h1>Reseting Password for {name}: </h1>\r\n    <p> Recieved from {email}</p>\r\n            {resetPasswordForm()}\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default ResetPassword;"]},"metadata":{},"sourceType":"module"}