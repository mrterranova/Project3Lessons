{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\src\\\\core\\\\pages\\\\Admin\\\\components\\\\DraftLesson.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst _Draft = Draft,\n      Editor = _Draft.Editor,\n      EditorState = _Draft.EditorState,\n      RichUtils = _Draft.RichUtils;\n\nclass DraftLesson extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n\n    this.focus = () => this.refs.editor.focus();\n\n    this.onChange = editorState => this.setState({\n      editorState\n    });\n\n    this.handleKeyCommand = command => this._handleKeyCommand(command);\n\n    this.onTab = e => this._onTab(e);\n\n    this.toggleBlockType = type => this._toggleBlockType(type);\n\n    this.toggleInlineStyle = style => this._toggleInlineStyle(style);\n  }\n\n  _handleKeyCommand(command) {\n    const editorState = this.state.editorState;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  _onTab(e) {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n  }\n\n  render() {\n    const editorState = this.state.editorState; // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"RichEditor-root\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(BlockStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleBlockType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(InlineStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleInlineStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: className,\n      onClick: this.focus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      blockStyleFn: getBlockStyle,\n      customStyleMap: styleMap,\n      editorState: editorState,\n      handleKeyCommand: this.handleKeyCommand,\n      onChange: this.onChange,\n      onTab: this.onTab,\n      placeholder: \"Tell a story...\",\n      ref: \"editor\",\n      spellCheck: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n} // Custom overrides for \"code\" style.\n\n\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton';\n\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return React.createElement(\"span\", {\n      className: className,\n      onMouseDown: this.onToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.props.label);\n  }\n\n}\n\nconst BLOCK_TYPES = [{\n  label: 'H1',\n  style: 'header-one'\n}, {\n  label: 'H2',\n  style: 'header-two'\n}, {\n  label: 'H3',\n  style: 'header-three'\n}, {\n  label: 'H4',\n  style: 'header-four'\n}, {\n  label: 'H5',\n  style: 'header-five'\n}, {\n  label: 'H6',\n  style: 'header-six'\n}, {\n  label: 'Blockquote',\n  style: 'blockquote'\n}, {\n  label: 'UL',\n  style: 'unordered-list-item'\n}, {\n  label: 'OL',\n  style: 'ordered-list-item'\n}, {\n  label: 'Code Block',\n  style: 'code-block'\n}];\n\nconst BlockStyleControls = props => {\n  const editorState = props.editorState;\n  const selection = editorState.getSelection();\n  const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, BLOCK_TYPES.map(type => React.createElement(StyleButton, {\n    key: type.label,\n    active: type.style === blockType,\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })));\n};\n\nvar INLINE_STYLES = [{\n  label: 'Bold',\n  style: 'BOLD'\n}, {\n  label: 'Italic',\n  style: 'ITALIC'\n}, {\n  label: 'Underline',\n  style: 'UNDERLINE'\n}, {\n  label: 'Monospace',\n  style: 'CODE'\n}];\n\nconst InlineStyleControls = props => {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, INLINE_STYLES.map(type => React.createElement(StyleButton, {\n    key: type.label,\n    active: currentStyle.has(type.style),\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(DraftLesson, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 194\n  },\n  __self: this\n}), document.getElementById('root'));\nexport default DraftLesson;","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/core/pages/Admin/components/DraftLesson.js"],"names":["React","ReactDOM","Draft","Editor","EditorState","RichUtils","DraftLesson","Component","constructor","props","state","editorState","createEmpty","focus","refs","editor","onChange","setState","handleKeyCommand","command","_handleKeyCommand","onTab","e","_onTab","toggleBlockType","type","_toggleBlockType","toggleInlineStyle","style","_toggleInlineStyle","newState","maxDepth","blockType","inlineStyle","render","className","contentState","getCurrentContent","hasText","getBlockMap","first","getType","getBlockStyle","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","onToggle","preventDefault","active","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nconst {Editor, EditorState, RichUtils} = Draft;\r\n\r\nclass DraftLesson extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {editorState: EditorState.createEmpty()};\r\n\r\n    this.focus = () => this.refs.editor.focus();\r\n    this.onChange = (editorState) => this.setState({editorState});\r\n\r\n    this.handleKeyCommand = (command) => this._handleKeyCommand(command);\r\n    this.onTab = (e) => this._onTab(e);\r\n    this.toggleBlockType = (type) => this._toggleBlockType(type);\r\n    this.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\r\n  }\r\n\r\n  _handleKeyCommand(command) {\r\n    const {editorState} = this.state;\r\n    const newState = RichUtils.handleKeyCommand(editorState, command);\r\n    if (newState) {\r\n      this.onChange(newState);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  _onTab(e) {\r\n    const maxDepth = 4;\r\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\r\n  }\r\n\r\n  _toggleBlockType(blockType) {\r\n    this.onChange(\r\n      RichUtils.toggleBlockType(\r\n        this.state.editorState,\r\n        blockType\r\n      )\r\n    );\r\n  }\r\n\r\n  _toggleInlineStyle(inlineStyle) {\r\n    this.onChange(\r\n      RichUtils.toggleInlineStyle(\r\n        this.state.editorState,\r\n        inlineStyle\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {editorState} = this.state;\r\n\r\n    // If the user changes block type before entering any text, we can\r\n    // either style the placeholder or hide it. Let's just hide it now.\r\n    let className = 'RichEditor-editor';\r\n    var contentState = editorState.getCurrentContent();\r\n    if (!contentState.hasText()) {\r\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n        className += ' RichEditor-hidePlaceholder';\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"RichEditor-root\">\r\n        <BlockStyleControls\r\n          editorState={editorState}\r\n          onToggle={this.toggleBlockType}\r\n        />\r\n        <InlineStyleControls\r\n          editorState={editorState}\r\n          onToggle={this.toggleInlineStyle}\r\n        />\r\n        <div className={className} onClick={this.focus}>\r\n          <Editor\r\n            blockStyleFn={getBlockStyle}\r\n            customStyleMap={styleMap}\r\n            editorState={editorState}\r\n            handleKeyCommand={this.handleKeyCommand}\r\n            onChange={this.onChange}\r\n            onTab={this.onTab}\r\n            placeholder=\"Tell a story...\"\r\n            ref=\"editor\"\r\n            spellCheck={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Custom overrides for \"code\" style.\r\nconst styleMap = {\r\n  CODE: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 2,\r\n  },\r\n};\r\n\r\nfunction getBlockStyle(block) {\r\n  switch (block.getType()) {\r\n    case 'blockquote': return 'RichEditor-blockquote';\r\n    default: return null;\r\n  }\r\n}\r\n\r\nclass StyleButton extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.onToggle = (e) => {\r\n      e.preventDefault();\r\n      this.props.onToggle(this.props.style);\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let className = 'RichEditor-styleButton';\r\n    if (this.props.active) {\r\n      className += ' RichEditor-activeButton';\r\n    }\r\n\r\n    return (\r\n      <span className={className} onMouseDown={this.onToggle}>\r\n        {this.props.label}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nconst BLOCK_TYPES = [\r\n  {label: 'H1', style: 'header-one'},\r\n  {label: 'H2', style: 'header-two'},\r\n  {label: 'H3', style: 'header-three'},\r\n  {label: 'H4', style: 'header-four'},\r\n  {label: 'H5', style: 'header-five'},\r\n  {label: 'H6', style: 'header-six'},\r\n  {label: 'Blockquote', style: 'blockquote'},\r\n  {label: 'UL', style: 'unordered-list-item'},\r\n  {label: 'OL', style: 'ordered-list-item'},\r\n  {label: 'Code Block', style: 'code-block'},\r\n];\r\n\r\nconst BlockStyleControls = (props) => {\r\n  const {editorState} = props;\r\n  const selection = editorState.getSelection();\r\n  const blockType = editorState\r\n    .getCurrentContent()\r\n    .getBlockForKey(selection.getStartKey())\r\n    .getType();\r\n\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {BLOCK_TYPES.map((type) =>\r\n        <StyleButton\r\n          key={type.label}\r\n          active={type.style === blockType}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nvar INLINE_STYLES = [\r\n  {label: 'Bold', style: 'BOLD'},\r\n  {label: 'Italic', style: 'ITALIC'},\r\n  {label: 'Underline', style: 'UNDERLINE'},\r\n  {label: 'Monospace', style: 'CODE'},\r\n];\r\n\r\nconst InlineStyleControls = (props) => {\r\n  var currentStyle = props.editorState.getCurrentInlineStyle();\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {INLINE_STYLES.map(type =>\r\n        <StyleButton\r\n          key={type.label}\r\n          active={currentStyle.has(type.style)}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(\r\n  <DraftLesson />,\r\n  document.getElementById('root')\r\n);\r\nexport default DraftLesson;"]},"metadata":{},"sourceType":"module"}