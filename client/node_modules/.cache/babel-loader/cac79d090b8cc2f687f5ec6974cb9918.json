{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (editorState, blockKey) {\n  var content = editorState.getCurrentContent();\n  var newSelection = new _draftJs.SelectionState({\n    anchorKey: blockKey,\n    anchorOffset: 0,\n    focusKey: blockKey,\n    focusOffset: 0\n  });\n  var afterKey = content.getKeyAfter(blockKey);\n  var afterBlock = content.getBlockForKey(afterKey);\n  var targetRange = void 0; // Only if the following block the last with no text then the whole block\n  // should be removed. Otherwise the block should be reduced to an unstyled block\n  // without any characters.\n\n  if (afterBlock && afterBlock.getType() === 'unstyled' && afterBlock.getLength() === 0 && afterBlock === content.getBlockMap().last()) {\n    targetRange = new _draftJs.SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: afterKey,\n      focusOffset: 0\n    });\n  } else {\n    targetRange = new _draftJs.SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: 1\n    });\n  } // change the blocktype and remove the characterList entry with the block\n\n\n  content = _draftJs.Modifier.setBlockType(content, targetRange, 'unstyled');\n  content = _draftJs.Modifier.removeRange(content, targetRange, 'backward'); // force to new selection\n\n  var newState = _draftJs.EditorState.push(editorState, content, 'remove-block');\n\n  return _draftJs.EditorState.forceSelection(newState, newSelection);\n};\n\nvar _draftJs = require('draft-js');","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/node_modules/draft-js-dnd-plugin/lib/modifiers/removeBlock.js"],"names":["Object","defineProperty","exports","value","default","editorState","blockKey","content","getCurrentContent","newSelection","_draftJs","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","afterKey","getKeyAfter","afterBlock","getBlockForKey","targetRange","getType","getLength","getBlockMap","last","Modifier","setBlockType","removeRange","newState","EditorState","push","forceSelection","require"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIAD,OAAO,CAACE,OAAR,GAAkB,UAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AACjD,MAAIC,OAAO,GAAGF,WAAW,CAACG,iBAAZ,EAAd;AACA,MAAIC,YAAY,GAAG,IAAIC,QAAQ,CAACC,cAAb,CAA4B;AAC7CC,IAAAA,SAAS,EAAEN,QADkC;AAE7CO,IAAAA,YAAY,EAAE,CAF+B;AAG7CC,IAAAA,QAAQ,EAAER,QAHmC;AAI7CS,IAAAA,WAAW,EAAE;AAJgC,GAA5B,CAAnB;AAOA,MAAIC,QAAQ,GAAGT,OAAO,CAACU,WAAR,CAAoBX,QAApB,CAAf;AACA,MAAIY,UAAU,GAAGX,OAAO,CAACY,cAAR,CAAuBH,QAAvB,CAAjB;AACA,MAAII,WAAW,GAAG,KAAK,CAAvB,CAXiD,CAajD;AACA;AACA;;AACA,MAAIF,UAAU,IAAIA,UAAU,CAACG,OAAX,OAAyB,UAAvC,IAAqDH,UAAU,CAACI,SAAX,OAA2B,CAAhF,IAAqFJ,UAAU,KAAKX,OAAO,CAACgB,WAAR,GAAsBC,IAAtB,EAAxG,EAAsI;AACpIJ,IAAAA,WAAW,GAAG,IAAIV,QAAQ,CAACC,cAAb,CAA4B;AACxCC,MAAAA,SAAS,EAAEN,QAD6B;AAExCO,MAAAA,YAAY,EAAE,CAF0B;AAGxCC,MAAAA,QAAQ,EAAEE,QAH8B;AAIxCD,MAAAA,WAAW,EAAE;AAJ2B,KAA5B,CAAd;AAMD,GAPD,MAOO;AACLK,IAAAA,WAAW,GAAG,IAAIV,QAAQ,CAACC,cAAb,CAA4B;AACxCC,MAAAA,SAAS,EAAEN,QAD6B;AAExCO,MAAAA,YAAY,EAAE,CAF0B;AAGxCC,MAAAA,QAAQ,EAAER,QAH8B;AAIxCS,MAAAA,WAAW,EAAE;AAJ2B,KAA5B,CAAd;AAMD,GA9BgD,CAgCjD;;;AACAR,EAAAA,OAAO,GAAGG,QAAQ,CAACe,QAAT,CAAkBC,YAAlB,CAA+BnB,OAA/B,EAAwCa,WAAxC,EAAqD,UAArD,CAAV;AACAb,EAAAA,OAAO,GAAGG,QAAQ,CAACe,QAAT,CAAkBE,WAAlB,CAA8BpB,OAA9B,EAAuCa,WAAvC,EAAoD,UAApD,CAAV,CAlCiD,CAoCjD;;AACA,MAAIQ,QAAQ,GAAGlB,QAAQ,CAACmB,WAAT,CAAqBC,IAArB,CAA0BzB,WAA1B,EAAuCE,OAAvC,EAAgD,cAAhD,CAAf;;AACA,SAAOG,QAAQ,CAACmB,WAAT,CAAqBE,cAArB,CAAoCH,QAApC,EAA8CnB,YAA9C,CAAP;AACD,CAvCD;;AAyCA,IAAIC,QAAQ,GAAGsB,OAAO,CAAC,UAAD,CAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (editorState, blockKey) {\n  var content = editorState.getCurrentContent();\n  var newSelection = new _draftJs.SelectionState({\n    anchorKey: blockKey,\n    anchorOffset: 0,\n    focusKey: blockKey,\n    focusOffset: 0\n  });\n\n  var afterKey = content.getKeyAfter(blockKey);\n  var afterBlock = content.getBlockForKey(afterKey);\n  var targetRange = void 0;\n\n  // Only if the following block the last with no text then the whole block\n  // should be removed. Otherwise the block should be reduced to an unstyled block\n  // without any characters.\n  if (afterBlock && afterBlock.getType() === 'unstyled' && afterBlock.getLength() === 0 && afterBlock === content.getBlockMap().last()) {\n    targetRange = new _draftJs.SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: afterKey,\n      focusOffset: 0\n    });\n  } else {\n    targetRange = new _draftJs.SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: 1\n    });\n  }\n\n  // change the blocktype and remove the characterList entry with the block\n  content = _draftJs.Modifier.setBlockType(content, targetRange, 'unstyled');\n  content = _draftJs.Modifier.removeRange(content, targetRange, 'backward');\n\n  // force to new selection\n  var newState = _draftJs.EditorState.push(editorState, content, 'remove-block');\n  return _draftJs.EditorState.forceSelection(newState, newSelection);\n};\n\nvar _draftJs = require('draft-js');"]},"metadata":{},"sourceType":"script"}