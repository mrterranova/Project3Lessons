{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = insertNewLine;\n\nvar _immutable = require('immutable');\n\nvar _draftJs = require('draft-js');\n\nvar insertBlockAfterSelection = function insertBlockAfterSelection(contentState, selectionState, newBlock) {\n  var targetKey = selectionState.getStartKey();\n  var array = [];\n  contentState.getBlockMap().forEach(function (block, blockKey) {\n    array.push(block);\n    if (blockKey !== targetKey) return;\n    array.push(newBlock);\n  });\n  return contentState.merge({\n    blockMap: _draftJs.BlockMapBuilder.createFromArray(array),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: newBlock.getKey(),\n      anchorOffset: newBlock.getLength(),\n      focusKey: newBlock.getKey(),\n      focusOffset: newBlock.getLength(),\n      isBackward: false\n    })\n  });\n};\n\nfunction insertNewLine(editorState) {\n  var contentState = editorState.getCurrentContent();\n  var selectionState = editorState.getSelection();\n  var newLineBlock = new _draftJs.ContentBlock({\n    key: (0, _draftJs.genKey)(),\n    type: 'unstyled',\n    text: '',\n    characterList: (0, _immutable.List)()\n  });\n  var withNewLine = insertBlockAfterSelection(contentState, selectionState, newLineBlock);\n  var newContent = withNewLine.merge({\n    selectionAfter: withNewLine.getSelectionAfter().set('hasFocus', true)\n  });\n  return _draftJs.EditorState.push(editorState, newContent, 'insert-fragment');\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/node_modules/draft-js-focus-plugin/lib/modifiers/insertNewLine.js"],"names":["Object","defineProperty","exports","value","default","insertNewLine","_immutable","require","_draftJs","insertBlockAfterSelection","contentState","selectionState","newBlock","targetKey","getStartKey","array","getBlockMap","forEach","block","blockKey","push","merge","blockMap","BlockMapBuilder","createFromArray","selectionBefore","selectionAfter","anchorKey","getKey","anchorOffset","getLength","focusKey","focusOffset","isBackward","editorState","getCurrentContent","getSelection","newLineBlock","ContentBlock","key","genKey","type","text","characterList","List","withNewLine","newContent","getSelectionAfter","set","EditorState"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIE,yBAAyB,GAAG,SAASA,yBAAT,CAAmCC,YAAnC,EAAiDC,cAAjD,EAAiEC,QAAjE,EAA2E;AACzG,MAAIC,SAAS,GAAGF,cAAc,CAACG,WAAf,EAAhB;AACA,MAAIC,KAAK,GAAG,EAAZ;AACAL,EAAAA,YAAY,CAACM,WAAb,GAA2BC,OAA3B,CAAmC,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC5DJ,IAAAA,KAAK,CAACK,IAAN,CAAWF,KAAX;AACA,QAAIC,QAAQ,KAAKN,SAAjB,EAA4B;AAC5BE,IAAAA,KAAK,CAACK,IAAN,CAAWR,QAAX;AACD,GAJD;AAKA,SAAOF,YAAY,CAACW,KAAb,CAAmB;AACxBC,IAAAA,QAAQ,EAAEd,QAAQ,CAACe,eAAT,CAAyBC,eAAzB,CAAyCT,KAAzC,CADc;AAExBU,IAAAA,eAAe,EAAEd,cAFO;AAGxBe,IAAAA,cAAc,EAAEf,cAAc,CAACU,KAAf,CAAqB;AACnCM,MAAAA,SAAS,EAAEf,QAAQ,CAACgB,MAAT,EADwB;AAEnCC,MAAAA,YAAY,EAAEjB,QAAQ,CAACkB,SAAT,EAFqB;AAGnCC,MAAAA,QAAQ,EAAEnB,QAAQ,CAACgB,MAAT,EAHyB;AAInCI,MAAAA,WAAW,EAAEpB,QAAQ,CAACkB,SAAT,EAJsB;AAKnCG,MAAAA,UAAU,EAAE;AALuB,KAArB;AAHQ,GAAnB,CAAP;AAWD,CAnBD;;AAqBA,SAAS5B,aAAT,CAAuB6B,WAAvB,EAAoC;AAClC,MAAIxB,YAAY,GAAGwB,WAAW,CAACC,iBAAZ,EAAnB;AACA,MAAIxB,cAAc,GAAGuB,WAAW,CAACE,YAAZ,EAArB;AACA,MAAIC,YAAY,GAAG,IAAI7B,QAAQ,CAAC8B,YAAb,CAA0B;AAC3CC,IAAAA,GAAG,EAAE,CAAC,GAAG/B,QAAQ,CAACgC,MAAb,GADsC;AAE3CC,IAAAA,IAAI,EAAE,UAFqC;AAG3CC,IAAAA,IAAI,EAAE,EAHqC;AAI3CC,IAAAA,aAAa,EAAE,CAAC,GAAGrC,UAAU,CAACsC,IAAf;AAJ4B,GAA1B,CAAnB;AAMA,MAAIC,WAAW,GAAGpC,yBAAyB,CAACC,YAAD,EAAeC,cAAf,EAA+B0B,YAA/B,CAA3C;AACA,MAAIS,UAAU,GAAGD,WAAW,CAACxB,KAAZ,CAAkB;AACjCK,IAAAA,cAAc,EAAEmB,WAAW,CAACE,iBAAZ,GAAgCC,GAAhC,CAAoC,UAApC,EAAgD,IAAhD;AADiB,GAAlB,CAAjB;AAGA,SAAOxC,QAAQ,CAACyC,WAAT,CAAqB7B,IAArB,CAA0Bc,WAA1B,EAAuCY,UAAvC,EAAmD,iBAAnD,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = insertNewLine;\n\nvar _immutable = require('immutable');\n\nvar _draftJs = require('draft-js');\n\nvar insertBlockAfterSelection = function insertBlockAfterSelection(contentState, selectionState, newBlock) {\n  var targetKey = selectionState.getStartKey();\n  var array = [];\n  contentState.getBlockMap().forEach(function (block, blockKey) {\n    array.push(block);\n    if (blockKey !== targetKey) return;\n    array.push(newBlock);\n  });\n  return contentState.merge({\n    blockMap: _draftJs.BlockMapBuilder.createFromArray(array),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: newBlock.getKey(),\n      anchorOffset: newBlock.getLength(),\n      focusKey: newBlock.getKey(),\n      focusOffset: newBlock.getLength(),\n      isBackward: false\n    })\n  });\n};\n\nfunction insertNewLine(editorState) {\n  var contentState = editorState.getCurrentContent();\n  var selectionState = editorState.getSelection();\n  var newLineBlock = new _draftJs.ContentBlock({\n    key: (0, _draftJs.genKey)(),\n    type: 'unstyled',\n    text: '',\n    characterList: (0, _immutable.List)()\n  });\n  var withNewLine = insertBlockAfterSelection(contentState, selectionState, newLineBlock);\n  var newContent = withNewLine.merge({\n    selectionAfter: withNewLine.getSelectionAfter().set('hasFocus', true)\n  });\n  return _draftJs.EditorState.push(editorState, newContent, 'insert-fragment');\n}"]},"metadata":{},"sourceType":"script"}