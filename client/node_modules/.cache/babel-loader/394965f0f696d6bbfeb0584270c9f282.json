{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\src\\\\core\\\\pages\\\\Admin\\\\components\\\\ui\\\\ImageSpan.js\";\nimport autobind from 'class-autobind';\nimport cx from 'classnames';\nimport React, { Component } from 'react';\nimport { Entity } from 'draft-js';\nimport styles from './ImageSpan.css';\nexport default class ImageSpan extends Component {\n  constructor(props) {\n    super(props);\n    autobind(this);\n    const entity = props.contentState.getEntity(props.entityKey);\n\n    const _entity$getData = entity.getData(),\n          width = _entity$getData.width,\n          height = _entity$getData.height;\n\n    this.state = {\n      width,\n      height\n    };\n  }\n\n  componentDidMount() {\n    const _this$state = this.state,\n          width = _this$state.width,\n          height = _this$state.height;\n    const entity = this.props.contentState.getEntity(this.props.entityKey);\n    const image = new Image();\n\n    const _entity$getData2 = entity.getData(),\n          src = _entity$getData2.src;\n\n    image.src = src;\n\n    image.onload = () => {\n      if (width == null || height == null) {\n        // TODO: isMounted?\n        this.setState({\n          width: image.width,\n          height: image.height\n        });\n        Entity.mergeData(this.props.entityKey, {\n          width: image.width,\n          height: image.height,\n          originalWidth: image.width,\n          originalHeight: image.height\n        });\n      }\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          width = _this$state2.width,\n          height = _this$state2.height;\n    let className = this.props.className;\n    const entity = this.props.contentState.getEntity(this.props.entityKey);\n\n    const _entity$getData3 = entity.getData(),\n          src = _entity$getData3.src;\n\n    className = cx(className, styles.root);\n    const imageStyle = {\n      verticalAlign: 'bottom',\n      backgroundImage: `url(\"${src}\")`,\n      backgroundSize: `${width}px ${height}px`,\n      lineHeight: `${height}px`,\n      fontSize: `${height}px`,\n      width,\n      height,\n      letterSpacing: width\n    };\n    return React.createElement(\"span\", {\n      className: className,\n      style: imageStyle,\n      onClick: this._onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n  _onClick() {\n    console.log('image clicked');\n  }\n\n  _handleResize(event, data) {\n    const _data$size = data.size,\n          width = _data$size.width,\n          height = _data$size.height;\n    this.setState({\n      width,\n      height\n    });\n    Entity.mergeData(this.props.entityKey, {\n      width,\n      height\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/core/pages/Admin/components/ui/ImageSpan.js"],"names":["autobind","cx","React","Component","Entity","styles","ImageSpan","constructor","props","entity","contentState","getEntity","entityKey","getData","width","height","state","componentDidMount","image","Image","src","onload","setState","mergeData","originalWidth","originalHeight","render","className","root","imageStyle","verticalAlign","backgroundImage","backgroundSize","lineHeight","fontSize","letterSpacing","_onClick","children","console","log","_handleResize","event","data","size"],"mappings":";AAEA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,QAAqB,UAArB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AAmBA,eAAe,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAI/CI,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AACAR,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,UAAMS,MAAM,GAAGD,KAAK,CAACE,YAAN,CAAmBC,SAAnB,CAA6BH,KAAK,CAACI,SAAnC,CAAf;;AAHwB,4BAIAH,MAAM,CAACI,OAAP,EAJA;AAAA,UAIjBC,KAJiB,mBAIjBA,KAJiB;AAAA,UAIVC,MAJU,mBAIVA,MAJU;;AAKxB,SAAKC,KAAL,GAAa;AACXF,MAAAA,KADW;AAEXC,MAAAA;AAFW,KAAb;AAID;;AAEDE,EAAAA,iBAAiB,GAAG;AAAA,wBACM,KAAKD,KADX;AAAA,UACXF,KADW,eACXA,KADW;AAAA,UACJC,MADI,eACJA,MADI;AAElB,UAAMN,MAAM,GAAG,KAAKD,KAAL,CAAWE,YAAX,CAAwBC,SAAxB,CAAkC,KAAKH,KAAL,CAAWI,SAA7C,CAAf;AACA,UAAMM,KAAK,GAAG,IAAIC,KAAJ,EAAd;;AAHkB,6BAIJV,MAAM,CAACI,OAAP,EAJI;AAAA,UAIXO,GAJW,oBAIXA,GAJW;;AAKlBF,IAAAA,KAAK,CAACE,GAAN,GAAYA,GAAZ;;AACAF,IAAAA,KAAK,CAACG,MAAN,GAAe,MAAM;AACnB,UAAIP,KAAK,IAAI,IAAT,IAAiBC,MAAM,IAAI,IAA/B,EAAqC;AACnC;AACA,aAAKO,QAAL,CAAc;AAACR,UAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAd;AAAqBC,UAAAA,MAAM,EAAEG,KAAK,CAACH;AAAnC,SAAd;AACAX,QAAAA,MAAM,CAACmB,SAAP,CACE,KAAKf,KAAL,CAAWI,SADb,EAEE;AACEE,UAAAA,KAAK,EAAEI,KAAK,CAACJ,KADf;AAEEC,UAAAA,MAAM,EAAEG,KAAK,CAACH,MAFhB;AAGES,UAAAA,aAAa,EAAEN,KAAK,CAACJ,KAHvB;AAIEW,UAAAA,cAAc,EAAEP,KAAK,CAACH;AAJxB,SAFF;AASD;AACF,KAdD;AAeD;;AAEDW,EAAAA,MAAM,GAAG;AAAA,yBACiB,KAAKV,KADtB;AAAA,UACAF,KADA,gBACAA,KADA;AAAA,UACOC,MADP,gBACOA,MADP;AAAA,QAEFY,SAFE,GAEW,KAAKnB,KAFhB,CAEFmB,SAFE;AAGP,UAAMlB,MAAM,GAAG,KAAKD,KAAL,CAAWE,YAAX,CAAwBC,SAAxB,CAAkC,KAAKH,KAAL,CAAWI,SAA7C,CAAf;;AAHO,6BAIOH,MAAM,CAACI,OAAP,EAJP;AAAA,UAIAO,GAJA,oBAIAA,GAJA;;AAMPO,IAAAA,SAAS,GAAG1B,EAAE,CAAC0B,SAAD,EAAYtB,MAAM,CAACuB,IAAnB,CAAd;AACA,UAAMC,UAAU,GAAG;AACjBC,MAAAA,aAAa,EAAE,QADE;AAEjBC,MAAAA,eAAe,EAAG,QAAOX,GAAI,IAFZ;AAGjBY,MAAAA,cAAc,EAAG,GAAElB,KAAM,MAAKC,MAAO,IAHpB;AAIjBkB,MAAAA,UAAU,EAAG,GAAElB,MAAO,IAJL;AAKjBmB,MAAAA,QAAQ,EAAG,GAAEnB,MAAO,IALH;AAMjBD,MAAAA,KANiB;AAOjBC,MAAAA,MAPiB;AAQjBoB,MAAAA,aAAa,EAAErB;AARE,KAAnB;AAWA,WACE;AACE,MAAA,SAAS,EAAEa,SADb;AAEE,MAAA,KAAK,EAAEE,UAFT;AAGE,MAAA,OAAO,EAAE,KAAKO,QAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,KAAK5B,KAAL,CAAW6B,QALd,CADF;AASD;;AAEDD,EAAAA,QAAQ,GAAG;AACTE,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AAEDC,EAAAA,aAAa,CAACC,KAAD,EAAgBC,IAAhB,EAA8B;AAAA,uBACjBA,IAAI,CAACC,IADY;AAAA,UAClC7B,KADkC,cAClCA,KADkC;AAAA,UAC3BC,MAD2B,cAC3BA,MAD2B;AAEzC,SAAKO,QAAL,CAAc;AAACR,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAd;AACAX,IAAAA,MAAM,CAACmB,SAAP,CACE,KAAKf,KAAL,CAAWI,SADb,EAEE;AAACE,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAFF;AAID;;AA9E8C","sourcesContent":["/* @flow */\n\nimport autobind from 'class-autobind';\nimport cx from 'classnames';\nimport React, {Component} from 'react';\nimport {Entity} from 'draft-js';\n\nimport styles from './ImageSpan.css';\n\nimport type {ContentState} from 'draft-js';\n\n// TODO: Use a more specific type here.\ntype ReactNode = any;\n\ntype Props = {\n  children: ReactNode;\n  entityKey: string;\n  contentState: ContentState,\n  className?: string;\n};\n\ntype State = {\n  width: number;\n  height: number;\n};\n\nexport default class ImageSpan extends Component {\n  props: Props;\n  state: State;\n\n  constructor(props: Props) {\n    super(props);\n    autobind(this);\n    const entity = props.contentState.getEntity(props.entityKey);\n    const {width, height} = entity.getData();\n    this.state = {\n      width,\n      height,\n    };\n  }\n\n  componentDidMount() {\n    const {width, height} = this.state;\n    const entity = this.props.contentState.getEntity(this.props.entityKey);\n    const image = new Image();\n    const {src} = entity.getData();\n    image.src = src;\n    image.onload = () => {\n      if (width == null || height == null) {\n        // TODO: isMounted?\n        this.setState({width: image.width, height: image.height});\n        Entity.mergeData(\n          this.props.entityKey,\n          {\n            width: image.width,\n            height: image.height,\n            originalWidth: image.width,\n            originalHeight: image.height,\n          }\n        );\n      }\n    };\n  }\n\n  render() {\n    const {width, height} = this.state;\n    let {className} = this.props;\n    const entity = this.props.contentState.getEntity(this.props.entityKey);\n    const {src} = entity.getData();\n\n    className = cx(className, styles.root);\n    const imageStyle = {\n      verticalAlign: 'bottom',\n      backgroundImage: `url(\"${src}\")`,\n      backgroundSize: `${width}px ${height}px`,\n      lineHeight: `${height}px`,\n      fontSize: `${height}px`,\n      width,\n      height,\n      letterSpacing: width,\n    };\n\n    return (\n      <span\n        className={className}\n        style={imageStyle}\n        onClick={this._onClick}\n      >\n        {this.props.children}\n      </span>\n    );\n  }\n\n  _onClick() {\n    console.log('image clicked');\n  }\n\n  _handleResize(event: Object, data: Object) {\n    const {width, height} = data.size;\n    this.setState({width, height});\n    Entity.mergeData(\n      this.props.entityKey,\n      {width, height}\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}