{"ast":null,"code":"/**\n * Ported from:\n *   https://github.com/chjj/marked/blob/49b7eaca/lib/marked.js\n * TODO:\n *   Use ES6 classes\n *   Add flow annotations\n */\nimport { TextNode, ElementNode, FragmentNode, SELF_CLOSING } from 'synthetic-dom';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign || function (obj) {\n  var i = 1;\n\n  for (; i < arguments.length; i++) {\n    var target = arguments[i];\n\n    for (var key in target) {\n      if (hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n};\n\nvar noop = function noop() {};\n\nnoop.exec = noop;\nvar defaults = {\n  gfm: true,\n  breaks: false,\n  pedantic: false,\n  smartLists: false,\n  silent: false,\n  langPrefix: 'lang-',\n  renderer: new Renderer(),\n  xhtml: false,\n  atomicImages: false\n};\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')(/bull/g, block.bullet)();\nblock.list = replace(block.list)(/bull/g, block.bullet)('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')('def', '\\\\n+(?=' + block.def.source + ')')();\nblock.blockquote = replace(block.blockquote)('def', block.def)();\nblock.paragraph = replace(block.paragraph)('hr', block.hr)('heading', block.heading)('lheading', block.lheading)('blockquote', block.blockquote)('def', block.def)();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = assign({}, block);\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = assign({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\nblock.gfm.paragraph = replace(block.paragraph)('(?!', '(?!' + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|' + block.list.source.replace('\\\\1', '\\\\3') + '|')();\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options ? assign({}, defaults, options) : assign({}, defaults);\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    this.rules = block.gfm;\n  }\n}\n/**\n * Expose Block Rules\n */\n\n\nLexer.rules = block;\n/**\n * Static Lex Method\n */\n\nLexer.parse = function (src, options) {\n  var lexer = new Lexer(options);\n  return lexer.parse(src);\n};\n/**\n * Preprocessing\n */\n\n\nLexer.prototype.parse = function (src) {\n  src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ').replace(/\\u00a0/g, ' ').replace(/\\u2424/g, '\\n');\n  return this.token(src, true);\n};\n/**\n * Lexing\n */\n\n\nLexer.prototype.token = function (src, top, bq) {\n  var next;\n  var loose;\n  var cap;\n  var bull;\n  var b;\n  var item;\n  var space;\n  var i;\n  var l;\n  src = src.replace(/^ +$/gm, '');\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    } // code\n\n\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic ? cap.replace(/\\n+$/, '') : cap\n      });\n      continue;\n    } // fences (gfm)\n\n\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3]\n      });\n      continue;\n    } // heading\n\n\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    } // lheading\n\n\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    } // hr\n\n\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    } // blockquote\n\n\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n      cap = cap[0].replace(/^ *> ?/gm, ''); // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n\n      this.token(cap, top, true);\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n      continue;\n    } // list\n\n\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      }); // Get each top-level item.\n\n      cap = cap[0].match(this.rules.item);\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i]; // Remove the list item's bullet\n        // so it is seen as the next token.\n\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, ''); // Outdent whatever the\n        // list item contains. Hacky.\n\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');\n        } // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n\n\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        } // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n\n\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n\n          if (!loose) {\n            loose = next;\n          }\n        }\n\n        this.tokens.push({\n          type: loose ? 'loose_item_start' : 'list_item_start'\n        }); // Recurse.\n\n        this.token(item, false, bq);\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n      continue;\n    } // def\n\n\n    if (!bq && top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    } // top-level paragraph\n\n\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1]\n      });\n      continue;\n    } // text\n\n\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n/**\n * Inline-Level Grammar\n */\n\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  ins: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline.link = replace(inline.link)('inside', inline._inside)('href', inline._href)();\ninline.reflink = replace(inline.reflink)('inside', inline._inside)();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = assign({}, inline);\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = assign({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = assign({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  ins: /^\\+\\+(?=\\S)([\\s\\S]*?\\S)\\+\\+/,\n  text: replace(inline.text)(']|', '~+]|')()\n});\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = assign({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = assign({}, options || defaults);\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n/**\n * Expose Inline Rules\n */\n\n\nInlineLexer.rules = inline;\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.parse = function (src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.parse(src);\n};\n/**\n * Lexing/Compiling\n */\n\n\nInlineLexer.prototype.parse = function (src) {\n  var out = new FragmentNode();\n  var link;\n  var cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(new TextNode(cap[1]));\n      continue;\n    } // link\n\n\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out.appendChild(this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      }));\n      this.inLink = false;\n      continue;\n    } // reflink, nolink\n\n\n    if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n\n      if (!link || !link.href) {\n        out.appendChild(new TextNode(cap[0].charAt(0)));\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n\n      this.inLink = true;\n      out.appendChild(this.outputLink(cap, link));\n      this.inLink = false;\n      continue;\n    } // strong\n\n\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.strong(this.parse(cap[2] || cap[1])));\n      continue;\n    } // em\n\n\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.em(this.parse(cap[2] || cap[1])));\n      continue;\n    } // code\n\n\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.codespan(cap[2]));\n      continue;\n    } // br\n\n\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.br());\n      continue;\n    } // del (gfm)\n\n\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.del(this.parse(cap[1])));\n      continue;\n    } // ins (gfm extended)\n\n\n    if (cap = this.rules.ins.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.ins(this.parse(cap[1])));\n      continue;\n    } // text\n\n\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.text(new TextNode(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n/**\n * Compile Link\n */\n\n\nInlineLexer.prototype.outputLink = function (cap, link) {\n  var href = link.href;\n  var title = link.title;\n  return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.parse(cap[1])) : this.renderer.image(href, title, cap[1]);\n};\n/**\n * Renderer\n */\n\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function (text, lang) {\n  var codeAttrs = [];\n  var preAttrs = [];\n\n  if (lang) {\n    codeAttrs.push({\n      name: 'class',\n      value: this.options.langPrefix + lang\n    });\n    preAttrs.push({\n      name: 'data-language',\n      value: lang\n    });\n  }\n\n  var codeNode = new ElementNode('code', codeAttrs, [new TextNode(text)]);\n  return new ElementNode('pre', preAttrs, [codeNode]);\n};\n\nRenderer.prototype.blockquote = function (childNode) {\n  return new ElementNode('blockquote', [], [childNode]);\n};\n\nRenderer.prototype.heading = function (childNode, level) {\n  return new ElementNode('h' + level, [], [childNode]);\n};\n\nRenderer.prototype.hr = function () {\n  return new ElementNode('hr', [], SELF_CLOSING);\n};\n\nRenderer.prototype.list = function (childNode, isOrdered) {\n  return new ElementNode(isOrdered ? 'ol' : 'ul', [], [childNode]);\n};\n\nRenderer.prototype.listitem = function (childNode) {\n  return new ElementNode('li', [], [childNode]);\n};\n\nRenderer.prototype.paragraph = function (childNode) {\n  return new ElementNode('p', [], [childNode]);\n}; // span level renderer\n\n\nRenderer.prototype.strong = function (childNode) {\n  return new ElementNode('strong', [], [childNode]);\n};\n\nRenderer.prototype.em = function (childNode) {\n  return new ElementNode('em', [], [childNode]);\n};\n\nRenderer.prototype.codespan = function (text) {\n  return new ElementNode('code', [], [new TextNode(text)]);\n};\n\nRenderer.prototype.br = function () {\n  return new ElementNode('br', [], SELF_CLOSING);\n};\n\nRenderer.prototype.del = function (childNode) {\n  return new ElementNode('del', [], [childNode]);\n};\n\nRenderer.prototype.ins = function (childNode) {\n  return new ElementNode('ins', [], [childNode]);\n};\n\nRenderer.prototype.link = function (href, title, childNode) {\n  var attributes = [{\n    name: 'href',\n    value: href\n  }];\n\n  if (title) {\n    attributes.push({\n      name: 'title',\n      value: title\n    });\n  }\n\n  return new ElementNode('a', attributes, [childNode]);\n};\n\nRenderer.prototype.image = function (href, title, alt) {\n  var attributes = [{\n    name: 'src',\n    value: href\n  }];\n\n  if (title) {\n    attributes.push({\n      name: 'title',\n      value: title\n    });\n  }\n\n  if (alt) {\n    attributes.push({\n      name: 'alt',\n      value: alt\n    });\n  }\n\n  var img = new ElementNode('img', attributes, SELF_CLOSING); // Wrap the image in a <figure> if we want \"atomic\" images.\n\n  if (this.options.atomicImages) {\n    return new ElementNode('figure', [], [img]);\n  } else {\n    return img;\n  }\n};\n\nRenderer.prototype.text = function (childNode) {\n  return childNode;\n};\n/**\n * Parsing & Compiling\n */\n\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = assign({}, options || defaults);\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n/**\n * Static Parse Method\n */\n\n\nParser.parse = function (src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n/**\n * Parse Loop\n */\n\n\nParser.prototype.parse = function (src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.slice().reverse();\n  var out = new FragmentNode();\n\n  while (this.next()) {\n    out.appendChild(this.tok());\n  }\n\n  return out;\n};\n/**\n * Next Token\n */\n\n\nParser.prototype.next = function () {\n  return this.token = this.tokens.pop();\n};\n/**\n * Preview Next Token\n */\n\n\nParser.prototype.peek = function () {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n/**\n * Parse Text Tokens\n */\n\n\nParser.prototype.parseText = function () {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.parse(body);\n};\n/**\n * Parse Current Token\n */\n\n\nParser.prototype.tok = function () {\n  switch (this.token.type) {\n    case 'space':\n      {\n        return new TextNode('');\n      }\n\n    case 'hr':\n      {\n        return this.renderer.hr();\n      }\n\n    case 'heading':\n      {\n        return this.renderer.heading(this.inline.parse(this.token.text), this.token.depth);\n      }\n\n    case 'code':\n      {\n        return this.renderer.code(this.token.text, this.token.lang);\n      }\n\n    case 'blockquote_start':\n      {\n        var body = new FragmentNode();\n\n        while (this.next().type !== 'blockquote_end') {\n          body.appendChild(this.tok());\n        }\n\n        return this.renderer.blockquote(body);\n      }\n\n    case 'list_start':\n      {\n        var _body = new FragmentNode();\n\n        var ordered = this.token.ordered;\n\n        while (this.next().type !== 'list_end') {\n          _body.appendChild(this.tok());\n        }\n\n        return this.renderer.list(_body, ordered);\n      }\n\n    case 'list_item_start':\n      {\n        var _body2 = new FragmentNode();\n\n        while (this.next().type !== 'list_item_end') {\n          _body2.appendChild(this.token.type === 'text' ? this.parseText() : this.tok());\n        }\n\n        return this.renderer.listitem(_body2);\n      }\n\n    case 'loose_item_start':\n      {\n        var _body3 = new FragmentNode();\n\n        while (this.next().type !== 'list_item_end') {\n          _body3.appendChild(this.tok());\n        }\n\n        return this.renderer.listitem(_body3);\n      }\n\n    case 'paragraph':\n      {\n        return this.renderer.paragraph(this.inline.parse(this.token.text));\n      }\n\n    case 'text':\n      {\n        return this.renderer.paragraph(this.parseText());\n      }\n  }\n};\n/**\n * Helpers\n */\n\n\nfunction replace(regex, options) {\n  regex = regex.source;\n  options = options || '';\n  return function self(name, val) {\n    if (!name) {\n      return new RegExp(regex, options);\n    }\n\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nvar MarkdownParser = {\n  parse: function parse(src, options) {\n    options = assign({}, defaults, options);\n\n    try {\n      var fragment = Parser.parse(Lexer.parse(src, options), options);\n    } catch (e) {\n      if (options.silent) {\n        fragment = new FragmentNode([new ElementNode('p', [], [new TextNode('An error occured:')]), new ElementNode('pre', [], [new TextNode(e.message)])]);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.getAST) {\n      return new ElementNode('body', [], [fragment]);\n    } else {\n      return fragment.toString(this.options.xhtml);\n    }\n  }\n};\nexport default MarkdownParser;","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/node_modules/draft-js-import-markdown/esm/MarkdownParser.js"],"names":["TextNode","ElementNode","FragmentNode","SELF_CLOSING","hasOwnProperty","Object","prototype","assign","obj","i","arguments","length","target","key","call","noop","exec","defaults","gfm","breaks","pedantic","smartLists","silent","langPrefix","renderer","Renderer","xhtml","atomicImages","block","newline","code","fences","hr","heading","nptable","lheading","blockquote","list","def","paragraph","text","bullet","item","replace","source","normal","Lexer","options","tokens","links","rules","parse","src","lexer","token","top","bq","next","loose","cap","bull","b","space","l","substring","push","type","lang","depth","ordered","match","indexOf","RegExp","slice","join","test","charAt","toLowerCase","href","title","Error","charCodeAt","inline","escape","link","reflink","nolink","strong","em","br","del","ins","_inside","_href","InlineLexer","out","appendChild","inLink","outputLink","codespan","image","codeAttrs","preAttrs","name","value","codeNode","childNode","level","isOrdered","listitem","attributes","alt","img","Parser","parser","reverse","tok","pop","peek","parseText","body","_body","_body2","_body3","regex","self","val","MarkdownParser","fragment","e","message","getAST","toString"],"mappings":"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","sourcesContent":["/**\n * Ported from:\n *   https://github.com/chjj/marked/blob/49b7eaca/lib/marked.js\n * TODO:\n *   Use ES6 classes\n *   Add flow annotations\n */\nimport { TextNode, ElementNode, FragmentNode, SELF_CLOSING } from 'synthetic-dom';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign || function (obj) {\n  var i = 1;\n\n  for (; i < arguments.length; i++) {\n    var target = arguments[i];\n\n    for (var key in target) {\n      if (hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n};\n\nvar noop = function noop() {};\n\nnoop.exec = noop;\nvar defaults = {\n  gfm: true,\n  breaks: false,\n  pedantic: false,\n  smartLists: false,\n  silent: false,\n  langPrefix: 'lang-',\n  renderer: new Renderer(),\n  xhtml: false,\n  atomicImages: false\n};\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')(/bull/g, block.bullet)();\nblock.list = replace(block.list)(/bull/g, block.bullet)('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')('def', '\\\\n+(?=' + block.def.source + ')')();\nblock.blockquote = replace(block.blockquote)('def', block.def)();\nblock.paragraph = replace(block.paragraph)('hr', block.hr)('heading', block.heading)('lheading', block.lheading)('blockquote', block.blockquote)('def', block.def)();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = assign({}, block);\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = assign({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\nblock.gfm.paragraph = replace(block.paragraph)('(?!', '(?!' + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|' + block.list.source.replace('\\\\1', '\\\\3') + '|')();\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options ? assign({}, defaults, options) : assign({}, defaults);\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    this.rules = block.gfm;\n  }\n}\n/**\n * Expose Block Rules\n */\n\n\nLexer.rules = block;\n/**\n * Static Lex Method\n */\n\nLexer.parse = function (src, options) {\n  var lexer = new Lexer(options);\n  return lexer.parse(src);\n};\n/**\n * Preprocessing\n */\n\n\nLexer.prototype.parse = function (src) {\n  src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ').replace(/\\u00a0/g, ' ').replace(/\\u2424/g, '\\n');\n  return this.token(src, true);\n};\n/**\n * Lexing\n */\n\n\nLexer.prototype.token = function (src, top, bq) {\n  var next;\n  var loose;\n  var cap;\n  var bull;\n  var b;\n  var item;\n  var space;\n  var i;\n  var l;\n  src = src.replace(/^ +$/gm, '');\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    } // code\n\n\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic ? cap.replace(/\\n+$/, '') : cap\n      });\n      continue;\n    } // fences (gfm)\n\n\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3]\n      });\n      continue;\n    } // heading\n\n\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    } // lheading\n\n\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    } // hr\n\n\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    } // blockquote\n\n\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n      cap = cap[0].replace(/^ *> ?/gm, ''); // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n\n      this.token(cap, top, true);\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n      continue;\n    } // list\n\n\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      }); // Get each top-level item.\n\n      cap = cap[0].match(this.rules.item);\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i]; // Remove the list item's bullet\n        // so it is seen as the next token.\n\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, ''); // Outdent whatever the\n        // list item contains. Hacky.\n\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');\n        } // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n\n\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        } // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n\n\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n\n          if (!loose) {\n            loose = next;\n          }\n        }\n\n        this.tokens.push({\n          type: loose ? 'loose_item_start' : 'list_item_start'\n        }); // Recurse.\n\n        this.token(item, false, bq);\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n      continue;\n    } // def\n\n\n    if (!bq && top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    } // top-level paragraph\n\n\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1]\n      });\n      continue;\n    } // text\n\n\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n/**\n * Inline-Level Grammar\n */\n\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  ins: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline.link = replace(inline.link)('inside', inline._inside)('href', inline._href)();\ninline.reflink = replace(inline.reflink)('inside', inline._inside)();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = assign({}, inline);\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = assign({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = assign({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  ins: /^\\+\\+(?=\\S)([\\s\\S]*?\\S)\\+\\+/,\n  text: replace(inline.text)(']|', '~+]|')()\n});\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = assign({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = assign({}, options || defaults);\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n/**\n * Expose Inline Rules\n */\n\n\nInlineLexer.rules = inline;\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.parse = function (src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.parse(src);\n};\n/**\n * Lexing/Compiling\n */\n\n\nInlineLexer.prototype.parse = function (src) {\n  var out = new FragmentNode();\n  var link;\n  var cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(new TextNode(cap[1]));\n      continue;\n    } // link\n\n\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out.appendChild(this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      }));\n      this.inLink = false;\n      continue;\n    } // reflink, nolink\n\n\n    if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n\n      if (!link || !link.href) {\n        out.appendChild(new TextNode(cap[0].charAt(0)));\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n\n      this.inLink = true;\n      out.appendChild(this.outputLink(cap, link));\n      this.inLink = false;\n      continue;\n    } // strong\n\n\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.strong(this.parse(cap[2] || cap[1])));\n      continue;\n    } // em\n\n\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.em(this.parse(cap[2] || cap[1])));\n      continue;\n    } // code\n\n\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.codespan(cap[2]));\n      continue;\n    } // br\n\n\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.br());\n      continue;\n    } // del (gfm)\n\n\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.del(this.parse(cap[1])));\n      continue;\n    } // ins (gfm extended)\n\n\n    if (cap = this.rules.ins.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.ins(this.parse(cap[1])));\n      continue;\n    } // text\n\n\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.appendChild(this.renderer.text(new TextNode(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n/**\n * Compile Link\n */\n\n\nInlineLexer.prototype.outputLink = function (cap, link) {\n  var href = link.href;\n  var title = link.title;\n  return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.parse(cap[1])) : this.renderer.image(href, title, cap[1]);\n};\n/**\n * Renderer\n */\n\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function (text, lang) {\n  var codeAttrs = [];\n  var preAttrs = [];\n\n  if (lang) {\n    codeAttrs.push({\n      name: 'class',\n      value: this.options.langPrefix + lang\n    });\n    preAttrs.push({\n      name: 'data-language',\n      value: lang\n    });\n  }\n\n  var codeNode = new ElementNode('code', codeAttrs, [new TextNode(text)]);\n  return new ElementNode('pre', preAttrs, [codeNode]);\n};\n\nRenderer.prototype.blockquote = function (childNode) {\n  return new ElementNode('blockquote', [], [childNode]);\n};\n\nRenderer.prototype.heading = function (childNode, level) {\n  return new ElementNode('h' + level, [], [childNode]);\n};\n\nRenderer.prototype.hr = function () {\n  return new ElementNode('hr', [], SELF_CLOSING);\n};\n\nRenderer.prototype.list = function (childNode, isOrdered) {\n  return new ElementNode(isOrdered ? 'ol' : 'ul', [], [childNode]);\n};\n\nRenderer.prototype.listitem = function (childNode) {\n  return new ElementNode('li', [], [childNode]);\n};\n\nRenderer.prototype.paragraph = function (childNode) {\n  return new ElementNode('p', [], [childNode]);\n}; // span level renderer\n\n\nRenderer.prototype.strong = function (childNode) {\n  return new ElementNode('strong', [], [childNode]);\n};\n\nRenderer.prototype.em = function (childNode) {\n  return new ElementNode('em', [], [childNode]);\n};\n\nRenderer.prototype.codespan = function (text) {\n  return new ElementNode('code', [], [new TextNode(text)]);\n};\n\nRenderer.prototype.br = function () {\n  return new ElementNode('br', [], SELF_CLOSING);\n};\n\nRenderer.prototype.del = function (childNode) {\n  return new ElementNode('del', [], [childNode]);\n};\n\nRenderer.prototype.ins = function (childNode) {\n  return new ElementNode('ins', [], [childNode]);\n};\n\nRenderer.prototype.link = function (href, title, childNode) {\n  var attributes = [{\n    name: 'href',\n    value: href\n  }];\n\n  if (title) {\n    attributes.push({\n      name: 'title',\n      value: title\n    });\n  }\n\n  return new ElementNode('a', attributes, [childNode]);\n};\n\nRenderer.prototype.image = function (href, title, alt) {\n  var attributes = [{\n    name: 'src',\n    value: href\n  }];\n\n  if (title) {\n    attributes.push({\n      name: 'title',\n      value: title\n    });\n  }\n\n  if (alt) {\n    attributes.push({\n      name: 'alt',\n      value: alt\n    });\n  }\n\n  var img = new ElementNode('img', attributes, SELF_CLOSING); // Wrap the image in a <figure> if we want \"atomic\" images.\n\n  if (this.options.atomicImages) {\n    return new ElementNode('figure', [], [img]);\n  } else {\n    return img;\n  }\n};\n\nRenderer.prototype.text = function (childNode) {\n  return childNode;\n};\n/**\n * Parsing & Compiling\n */\n\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = assign({}, options || defaults);\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n/**\n * Static Parse Method\n */\n\n\nParser.parse = function (src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n/**\n * Parse Loop\n */\n\n\nParser.prototype.parse = function (src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.slice().reverse();\n  var out = new FragmentNode();\n\n  while (this.next()) {\n    out.appendChild(this.tok());\n  }\n\n  return out;\n};\n/**\n * Next Token\n */\n\n\nParser.prototype.next = function () {\n  return this.token = this.tokens.pop();\n};\n/**\n * Preview Next Token\n */\n\n\nParser.prototype.peek = function () {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n/**\n * Parse Text Tokens\n */\n\n\nParser.prototype.parseText = function () {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.parse(body);\n};\n/**\n * Parse Current Token\n */\n\n\nParser.prototype.tok = function () {\n  switch (this.token.type) {\n    case 'space':\n      {\n        return new TextNode('');\n      }\n\n    case 'hr':\n      {\n        return this.renderer.hr();\n      }\n\n    case 'heading':\n      {\n        return this.renderer.heading(this.inline.parse(this.token.text), this.token.depth);\n      }\n\n    case 'code':\n      {\n        return this.renderer.code(this.token.text, this.token.lang);\n      }\n\n    case 'blockquote_start':\n      {\n        var body = new FragmentNode();\n\n        while (this.next().type !== 'blockquote_end') {\n          body.appendChild(this.tok());\n        }\n\n        return this.renderer.blockquote(body);\n      }\n\n    case 'list_start':\n      {\n        var _body = new FragmentNode();\n\n        var ordered = this.token.ordered;\n\n        while (this.next().type !== 'list_end') {\n          _body.appendChild(this.tok());\n        }\n\n        return this.renderer.list(_body, ordered);\n      }\n\n    case 'list_item_start':\n      {\n        var _body2 = new FragmentNode();\n\n        while (this.next().type !== 'list_item_end') {\n          _body2.appendChild(this.token.type === 'text' ? this.parseText() : this.tok());\n        }\n\n        return this.renderer.listitem(_body2);\n      }\n\n    case 'loose_item_start':\n      {\n        var _body3 = new FragmentNode();\n\n        while (this.next().type !== 'list_item_end') {\n          _body3.appendChild(this.tok());\n        }\n\n        return this.renderer.listitem(_body3);\n      }\n\n    case 'paragraph':\n      {\n        return this.renderer.paragraph(this.inline.parse(this.token.text));\n      }\n\n    case 'text':\n      {\n        return this.renderer.paragraph(this.parseText());\n      }\n  }\n};\n/**\n * Helpers\n */\n\n\nfunction replace(regex, options) {\n  regex = regex.source;\n  options = options || '';\n  return function self(name, val) {\n    if (!name) {\n      return new RegExp(regex, options);\n    }\n\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nvar MarkdownParser = {\n  parse: function parse(src, options) {\n    options = assign({}, defaults, options);\n\n    try {\n      var fragment = Parser.parse(Lexer.parse(src, options), options);\n    } catch (e) {\n      if (options.silent) {\n        fragment = new FragmentNode([new ElementNode('p', [], [new TextNode('An error occured:')]), new ElementNode('pre', [], [new TextNode(e.message)])]);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.getAST) {\n      return new ElementNode('body', [], [fragment]);\n    } else {\n      return fragment.toString(this.options.xhtml);\n    }\n  }\n};\nexport default MarkdownParser;"]},"metadata":{},"sourceType":"module"}