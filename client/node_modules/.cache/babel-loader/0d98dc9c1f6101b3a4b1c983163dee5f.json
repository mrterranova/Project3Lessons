{"ast":null,"code":"export default function replaceTextWithMeta(subject, searchText, replaceText) {\n  var text = subject.text,\n      characterMeta = subject.characterMeta;\n  var searchTextLength = searchText.length;\n  var replaceTextLength = replaceText.length;\n  var resultTextParts = []; // Get empty set of same kind as characterMeta.\n\n  var resultCharMeta = characterMeta.slice(0, 0);\n  var lastEndIndex = 0;\n  var index = text.indexOf(searchText);\n\n  while (index !== -1) {\n    resultTextParts.push(text.slice(lastEndIndex, index) + replaceText);\n    resultCharMeta = resultCharMeta.concat(characterMeta.slice(lastEndIndex, index), // Use the metadata of the first char we are replacing.\n    repeatSeq(characterMeta.slice(index, index + 1), replaceTextLength));\n    lastEndIndex = index + searchTextLength;\n    index = text.indexOf(searchText, lastEndIndex);\n  }\n\n  resultTextParts.push(text.slice(lastEndIndex));\n  resultCharMeta = resultCharMeta.concat(characterMeta.slice(lastEndIndex));\n  return {\n    text: resultTextParts.join(''),\n    characterMeta: resultCharMeta\n  };\n}\n\nfunction repeatSeq(seq, count) {\n  var result = seq.slice(0, 0);\n\n  while (count-- > 0) {\n    result = result.concat(seq);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/node_modules/draft-js-import-element/esm/lib/replaceTextWithMeta.js"],"names":["replaceTextWithMeta","subject","searchText","replaceText","text","characterMeta","searchTextLength","length","replaceTextLength","resultTextParts","resultCharMeta","slice","lastEndIndex","index","indexOf","push","concat","repeatSeq","join","seq","count","result"],"mappings":"AAAA,eAAe,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,UAAtC,EAAkDC,WAAlD,EAA+D;AAC5E,MAAIC,IAAI,GAAGH,OAAO,CAACG,IAAnB;AAAA,MACIC,aAAa,GAAGJ,OAAO,CAACI,aAD5B;AAEA,MAAIC,gBAAgB,GAAGJ,UAAU,CAACK,MAAlC;AACA,MAAIC,iBAAiB,GAAGL,WAAW,CAACI,MAApC;AACA,MAAIE,eAAe,GAAG,EAAtB,CAL4E,CAKlD;;AAE1B,MAAIC,cAAc,GAAGL,aAAa,CAACM,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAArB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,KAAK,GAAGT,IAAI,CAACU,OAAL,CAAaZ,UAAb,CAAZ;;AAEA,SAAOW,KAAK,KAAK,CAAC,CAAlB,EAAqB;AACnBJ,IAAAA,eAAe,CAACM,IAAhB,CAAqBX,IAAI,CAACO,KAAL,CAAWC,YAAX,EAAyBC,KAAzB,IAAkCV,WAAvD;AACAO,IAAAA,cAAc,GAAGA,cAAc,CAACM,MAAf,CAAsBX,aAAa,CAACM,KAAd,CAAoBC,YAApB,EAAkCC,KAAlC,CAAtB,EAAgE;AACjFI,IAAAA,SAAS,CAACZ,aAAa,CAACM,KAAd,CAAoBE,KAApB,EAA2BA,KAAK,GAAG,CAAnC,CAAD,EAAwCL,iBAAxC,CADQ,CAAjB;AAEAI,IAAAA,YAAY,GAAGC,KAAK,GAAGP,gBAAvB;AACAO,IAAAA,KAAK,GAAGT,IAAI,CAACU,OAAL,CAAaZ,UAAb,EAAyBU,YAAzB,CAAR;AACD;;AAEDH,EAAAA,eAAe,CAACM,IAAhB,CAAqBX,IAAI,CAACO,KAAL,CAAWC,YAAX,CAArB;AACAF,EAAAA,cAAc,GAAGA,cAAc,CAACM,MAAf,CAAsBX,aAAa,CAACM,KAAd,CAAoBC,YAApB,CAAtB,CAAjB;AACA,SAAO;AACLR,IAAAA,IAAI,EAAEK,eAAe,CAACS,IAAhB,CAAqB,EAArB,CADD;AAELb,IAAAA,aAAa,EAAEK;AAFV,GAAP;AAID;;AAED,SAASO,SAAT,CAAmBE,GAAnB,EAAwBC,KAAxB,EAA+B;AAC7B,MAAIC,MAAM,GAAGF,GAAG,CAACR,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAb;;AAEA,SAAOS,KAAK,KAAK,CAAjB,EAAoB;AAClBC,IAAAA,MAAM,GAAGA,MAAM,CAACL,MAAP,CAAcG,GAAd,CAAT;AACD;;AAED,SAAOE,MAAP;AACD","sourcesContent":["export default function replaceTextWithMeta(subject, searchText, replaceText) {\n  var text = subject.text,\n      characterMeta = subject.characterMeta;\n  var searchTextLength = searchText.length;\n  var replaceTextLength = replaceText.length;\n  var resultTextParts = []; // Get empty set of same kind as characterMeta.\n\n  var resultCharMeta = characterMeta.slice(0, 0);\n  var lastEndIndex = 0;\n  var index = text.indexOf(searchText);\n\n  while (index !== -1) {\n    resultTextParts.push(text.slice(lastEndIndex, index) + replaceText);\n    resultCharMeta = resultCharMeta.concat(characterMeta.slice(lastEndIndex, index), // Use the metadata of the first char we are replacing.\n    repeatSeq(characterMeta.slice(index, index + 1), replaceTextLength));\n    lastEndIndex = index + searchTextLength;\n    index = text.indexOf(searchText, lastEndIndex);\n  }\n\n  resultTextParts.push(text.slice(lastEndIndex));\n  resultCharMeta = resultCharMeta.concat(characterMeta.slice(lastEndIndex));\n  return {\n    text: resultTextParts.join(''),\n    characterMeta: resultCharMeta\n  };\n}\n\nfunction repeatSeq(seq, count) {\n  var result = seq.slice(0, 0);\n\n  while (count-- > 0) {\n    result = result.concat(seq);\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}