{"ast":null,"code":"import { ContentState, EditorState, convertToRaw, convertFromRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { stateToMarkdown } from 'draft-js-export-markdown';\nimport { stateFromMarkdown } from 'draft-js-import-markdown';\nexport default class EditorValue {\n  constructor(editorState, cache = {}) {\n    this._cache = cache;\n    this._editorState = editorState;\n  }\n\n  getEditorState() {\n    return this._editorState;\n  }\n\n  setEditorState(editorState) {\n    return this._editorState === editorState ? this : new EditorValue(editorState);\n  }\n\n  toString(format, options) {\n    let fromCache = this._cache[format];\n\n    if (fromCache != null) {\n      return fromCache;\n    }\n\n    return this._cache[format] = toString(this.getEditorState(), format, options);\n  }\n\n  setContentFromString(markup, format, options) {\n    let editorState = EditorState.push(this._editorState, fromString(markup, format, options), 'secondary-paste');\n    return new EditorValue(editorState, {\n      [format]: markup\n    });\n  }\n\n  static createEmpty(decorator) {\n    let editorState = EditorState.createEmpty(decorator);\n    return new EditorValue(editorState);\n  }\n\n  static createFromState(editorState) {\n    return new EditorValue(editorState);\n  }\n\n  static createFromString(markup, format, decorator, options) {\n    let contentState = fromString(markup, format, options);\n    let editorState = EditorState.createWithContent(contentState, decorator);\n    return new EditorValue(editorState, {\n      [format]: markup\n    });\n  }\n\n}\n\nfunction toString(editorState, format, options) {\n  let contentState = editorState.getCurrentContent();\n\n  switch (format) {\n    case 'html':\n      {\n        return stateToHTML(contentState, options);\n      }\n\n    case 'markdown':\n      {\n        return stateToMarkdown(contentState);\n      }\n\n    case 'raw':\n      {\n        return JSON.stringify(convertToRaw(contentState));\n      }\n\n    default:\n      {\n        throw new Error('Format not supported: ' + format);\n      }\n  }\n}\n\nfunction fromString(markup, format, options) {\n  switch (format) {\n    case 'html':\n      {\n        return stateFromHTML(markup, options);\n      }\n\n    case 'markdown':\n      {\n        return stateFromMarkdown(markup, options);\n      }\n\n    case 'raw':\n      {\n        return convertFromRaw(JSON.parse(markup));\n      }\n\n    default:\n      {\n        throw new Error('Format not supported: ' + format);\n      }\n  }\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/core/pages/Admin/components/lib/EditorValue.js"],"names":["ContentState","EditorState","convertToRaw","convertFromRaw","stateToHTML","stateFromHTML","stateToMarkdown","stateFromMarkdown","EditorValue","constructor","editorState","cache","_cache","_editorState","getEditorState","setEditorState","toString","format","options","fromCache","setContentFromString","markup","push","fromString","createEmpty","decorator","createFromState","createFromString","contentState","createWithContent","getCurrentContent","JSON","stringify","Error","parse"],"mappings":"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","sourcesContent":["/* @flow */\nimport {ContentState, EditorState, convertToRaw, convertFromRaw} from 'draft-js';\nimport {stateToHTML} from 'draft-js-export-html';\nimport {stateFromHTML} from 'draft-js-import-html';\nimport {stateToMarkdown} from 'draft-js-export-markdown';\nimport {stateFromMarkdown} from 'draft-js-import-markdown';\n\nimport type {DraftDecoratorType as Decorator} from 'draft-js/lib/DraftDecoratorType';\nimport type {Options as ImportOptions} from 'draft-js-import-html';\nimport type {Options as ExportOptions} from 'draft-js-export-html';\nexport type {ImportOptions, ExportOptions};\n\ntype StringMap = {[key: string]: string};\n\nexport default class EditorValue {\n  _editorState: EditorState;\n  _cache: StringMap;\n\n  constructor(editorState: EditorState, cache: StringMap = {}) {\n    this._cache = cache;\n    this._editorState = editorState;\n  }\n\n  getEditorState(): EditorState {\n    return this._editorState;\n  }\n\n  setEditorState(editorState: EditorState): EditorValue {\n    return (this._editorState === editorState) ?\n      this :\n      new EditorValue(editorState);\n  }\n\n  toString(format: string, options?: ExportOptions): string {\n    let fromCache = this._cache[format];\n    if (fromCache != null) {\n      return fromCache;\n    }\n    return (this._cache[format] = toString(this.getEditorState(), format, options));\n  }\n\n  setContentFromString(markup: string, format: string, options?: ImportOptions): EditorValue {\n    let editorState = EditorState.push(\n      this._editorState,\n      fromString(markup, format, options),\n      'secondary-paste'\n    );\n    return new EditorValue(editorState, {[format]: markup});\n  }\n\n  static createEmpty(decorator: ?Decorator): EditorValue {\n    let editorState = EditorState.createEmpty(decorator);\n    return new EditorValue(editorState);\n  }\n\n  static createFromState(editorState: EditorState): EditorValue {\n    return new EditorValue(editorState);\n  }\n\n  static createFromString(markup: string, format: string, decorator: ?Decorator, options?: ImportOptions): EditorValue {\n    let contentState = fromString(markup, format, options);\n    let editorState = EditorState.createWithContent(contentState, decorator);\n    return new EditorValue(editorState, {[format]: markup});\n  }\n}\n\nfunction toString(editorState: EditorState, format: string, options?: ExportOptions): string {\n  let contentState = editorState.getCurrentContent();\n  switch (format) {\n    case 'html': {\n      return stateToHTML(contentState, options);\n    }\n    case 'markdown': {\n      return stateToMarkdown(contentState);\n    }\n    case 'raw': {\n      return JSON.stringify(convertToRaw(contentState));\n    }\n    default: {\n      throw new Error('Format not supported: ' + format);\n    }\n  }\n}\n\nfunction fromString(markup: string, format: string, options?: ImportOptions): ContentState {\n  switch (format) {\n    case 'html': {\n      return stateFromHTML(markup, options);\n    }\n    case 'markdown': {\n      return stateFromMarkdown(markup, options);\n    }\n    case 'raw': {\n      return convertFromRaw(JSON.parse(markup));\n    }\n    default: {\n      throw new Error('Format not supported: ' + format);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}