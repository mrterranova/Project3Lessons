{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\src\\\\core\\\\pages\\\\Admin\\\\components\\\\PracticeDraft.js\";\nimport React, { Component } from 'react';\nimport RichTextEditor, { createEmptyValue } from './RichTextEditor';\nimport { convertToRaw } from 'draft-js';\nimport autobind from 'class-autobind';\nimport ButtonGroup from './ui/ButtonGroup';\nimport Dropdown from './ui/Dropdown';\nimport IconButton from './ui/IconButton';\nexport default class PracticeDraft extends Component {\n  constructor() {\n    super(...arguments);\n    autobind(this);\n    this.state = {\n      value: createEmptyValue(),\n      format: 'html',\n      readOnly: false\n    };\n  }\n\n  render() {\n    let _this$state = this.state,\n        value = _this$state.value,\n        format = _this$state.format;\n    return React.createElement(\"div\", {\n      className: \"editor-demo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(RichTextEditor, {\n      value: value,\n      onChange: this._onChange,\n      className: \"react-rte-demo\",\n      placeholder: \"Tell a story\",\n      toolbarClassName: \"demo-toolbar\",\n      editorClassName: \"demo-editor\",\n      readOnly: this.state.readOnly,\n      customControls: [// eslint-disable-next-line no-unused-vars\n      (setValue, getValue, editorState) => {\n        let choices = new Map([['1', {\n          label: '1'\n        }], ['2', {\n          label: '2'\n        }], ['3', {\n          label: '3'\n        }]]);\n        return React.createElement(ButtonGroup, {\n          key: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(Dropdown, {\n          choices: choices,\n          selectedKey: getValue('my-control-name'),\n          onChange: value => setValue('my-control-name', value),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }));\n      }, React.createElement(ButtonGroup, {\n        key: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        label: \"Remove Link\",\n        iconName: \"remove-link\",\n        focusOnClick: false,\n        onClick: () => console.log('You pressed a button'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }))],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"radio-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"format\",\n      value: \"html\",\n      checked: format === 'html',\n      onChange: this._onChangeFormat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"HTML\")), React.createElement(\"label\", {\n      className: \"radio-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"format\",\n      value: \"markdown\",\n      checked: format === 'markdown',\n      onChange: this._onChangeFormat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Markdown\")), React.createElement(\"label\", {\n      className: \"radio-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: this._onChangeReadOnly,\n      checked: this.state.readOnly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"row btn-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Debugging:\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this._logState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Log Content State\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this._logStateRaw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Log Raw\")));\n  }\n\n  _logState() {\n    let editorState = this.state.value.getEditorState();\n    let contentState = window.contentState = editorState.getCurrentContent().toJS();\n    console.log(contentState);\n  }\n\n  _logStateRaw() {\n    let editorState = this.state.value.getEditorState();\n    let contentState = editorState.getCurrentContent();\n    let rawContentState = window.rawContentState = convertToRaw(contentState);\n    console.log(JSON.stringify(rawContentState));\n  }\n\n  _onChange(value) {\n    this.setState({\n      value\n    });\n  }\n\n  _onChangeSource(event) {\n    let source = event.target.value;\n    let oldValue = this.state.value;\n    this.setState({\n      value: oldValue.setContentFromString(source, this.state.format)\n    });\n  }\n\n  _onChangeFormat(event) {\n    this.setState({\n      format: event.target.value\n    });\n  }\n\n  _onChangeReadOnly(event) {\n    this.setState({\n      readOnly: event.target.checked\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/core/pages/Admin/components/PracticeDraft.js"],"names":["React","Component","RichTextEditor","createEmptyValue","convertToRaw","autobind","ButtonGroup","Dropdown","IconButton","PracticeDraft","constructor","arguments","state","value","format","readOnly","render","_onChange","setValue","getValue","editorState","choices","Map","label","console","log","_onChangeFormat","_onChangeReadOnly","_logState","_logStateRaw","getEditorState","contentState","window","getCurrentContent","toJS","rawContentState","JSON","stringify","setState","_onChangeSource","event","source","target","oldValue","setContentFromString","checked"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport RichTextEditor, {createEmptyValue} from './RichTextEditor';\r\nimport {convertToRaw} from 'draft-js';\r\nimport autobind from 'class-autobind';\r\n\r\nimport ButtonGroup from './ui/ButtonGroup';\r\nimport Dropdown from './ui/Dropdown';\r\nimport IconButton from './ui/IconButton';\r\n\r\nimport type {EditorValue} from './RichTextEditor';\r\n\r\ntype Props = {};\r\ntype State = {\r\n  value: EditorValue;\r\n  format: string;\r\n  readOnly: boolean;\r\n};\r\n\r\nexport default class PracticeDraft extends Component {\r\n  props: Props;\r\n  state: State;\r\n\r\n  constructor() {\r\n    super(...arguments);\r\n    autobind(this);\r\n    this.state = {\r\n      value: createEmptyValue(),\r\n      format: 'html',\r\n      readOnly: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let {value, format} = this.state;\r\n\r\n    return (\r\n      <div className=\"editor-demo\">\r\n        <div className=\"row\">\r\n          <RichTextEditor\r\n            value={value}\r\n            onChange={this._onChange}\r\n            className=\"react-rte-demo\"\r\n            placeholder=\"Tell a story\"\r\n            toolbarClassName=\"demo-toolbar\"\r\n            editorClassName=\"demo-editor\"\r\n            readOnly={this.state.readOnly}\r\n            customControls={[\r\n              // eslint-disable-next-line no-unused-vars\r\n              (setValue, getValue, editorState) => {\r\n                let choices = new Map([\r\n                  ['1', {label: '1'}],\r\n                  ['2', {label: '2'}],\r\n                  ['3', {label: '3'}],\r\n                ]);\r\n                return (\r\n                  <ButtonGroup key={1}>\r\n                    <Dropdown\r\n                      choices={choices}\r\n                      selectedKey={getValue('my-control-name')}\r\n                      onChange={(value) => setValue('my-control-name', value)}\r\n                    />\r\n                  </ButtonGroup>\r\n                );\r\n              },\r\n              <ButtonGroup key={2}>\r\n                <IconButton\r\n                  label=\"Remove Link\"\r\n                  iconName=\"remove-link\"\r\n                  focusOnClick={false}\r\n                  onClick={() => console.log('You pressed a button')}\r\n                />\r\n              </ButtonGroup>,\r\n            ]}\r\n          />\r\n        </div>\r\n        <div className=\"row\">\r\n          <label className=\"radio-item\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"format\"\r\n              value=\"html\"\r\n              checked={format === 'html'}\r\n              onChange={this._onChangeFormat}\r\n            />\r\n            <span>HTML</span>\r\n          </label>\r\n          <label className=\"radio-item\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"format\"\r\n              value=\"markdown\"\r\n              checked={format === 'markdown'}\r\n              onChange={this._onChangeFormat}\r\n            />\r\n            <span>Markdown</span>\r\n          </label>\r\n          <label className=\"radio-item\">\r\n            <input\r\n              type=\"checkbox\"\r\n              onChange={this._onChangeReadOnly}\r\n              checked={this.state.readOnly}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className=\"row btn-row\">\r\n          <span className=\"label\">Debugging:</span>\r\n          <button className=\"btn\" onClick={this._logState}>Log Content State</button>\r\n          <button className=\"btn\" onClick={this._logStateRaw}>Log Raw</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _logState() {\r\n    let editorState = this.state.value.getEditorState();\r\n    let contentState = window.contentState = editorState.getCurrentContent().toJS();\r\n    console.log(contentState);\r\n  }\r\n\r\n  _logStateRaw() {\r\n    let editorState = this.state.value.getEditorState();\r\n    let contentState = editorState.getCurrentContent();\r\n    let rawContentState = window.rawContentState = convertToRaw(contentState);\r\n    console.log(JSON.stringify(rawContentState));\r\n  }\r\n\r\n  _onChange(value: EditorValue) {\r\n    this.setState({value});\r\n  }\r\n\r\n  _onChangeSource(event: Object) {\r\n    let source = event.target.value;\r\n    let oldValue = this.state.value;\r\n    this.setState({\r\n      value: oldValue.setContentFromString(source, this.state.format),\r\n    });\r\n  }\r\n\r\n  _onChangeFormat(event: Object) {\r\n    this.setState({format: event.target.value});\r\n  }\r\n\r\n  _onChangeReadOnly(event: Object) {\r\n    this.setState({readOnly: event.target.checked});\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}