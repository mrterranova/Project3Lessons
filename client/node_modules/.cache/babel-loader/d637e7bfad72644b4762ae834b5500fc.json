{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _draftJs = require('draft-js');\n\nexports.default = function (editorState, types) {\n  var selection = editorState.getSelection();\n\n  if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n    return null;\n  } // First, try to remove a preceding atomic block.\n\n\n  var content = editorState.getCurrentContent();\n  var startKey = selection.getStartKey();\n  var blockAfter = content.getBlockAfter(startKey); // If the current block is empty, just delete it.\n\n  if (blockAfter && content.getBlockForKey(startKey).getLength() === 0) {\n    return null;\n  }\n\n  var blockBefore = content.getBlockBefore(startKey);\n\n  if (blockBefore && types.indexOf(blockBefore.getType()) !== -1) {\n    var atomicBlockTarget = selection.merge({\n      anchorKey: blockBefore.getKey(),\n      anchorOffset: 0\n    });\n\n    var asCurrentStyle = _draftJs.Modifier.setBlockType(content, atomicBlockTarget, content.getBlockForKey(startKey).getType());\n\n    var withoutAtomicBlock = _draftJs.Modifier.removeRange(asCurrentStyle, atomicBlockTarget, 'backward');\n\n    if (withoutAtomicBlock !== content) {\n      return _draftJs.EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n  } // If that doesn't succeed, try to remove the current block style.\n\n\n  var withoutBlockStyle = _draftJs.RichUtils.tryToRemoveBlockStyle(editorState);\n\n  if (withoutBlockStyle) {\n    return _draftJs.EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n  }\n\n  return null;\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/node_modules/draft-js-cleanup-empty-plugin/lib/utils/onBackspace.js"],"names":["Object","defineProperty","exports","value","_draftJs","require","default","editorState","types","selection","getSelection","isCollapsed","getAnchorOffset","getFocusOffset","content","getCurrentContent","startKey","getStartKey","blockAfter","getBlockAfter","getBlockForKey","getLength","blockBefore","getBlockBefore","indexOf","getType","atomicBlockTarget","merge","anchorKey","getKey","anchorOffset","asCurrentStyle","Modifier","setBlockType","withoutAtomicBlock","removeRange","EditorState","push","withoutBlockStyle","RichUtils","tryToRemoveBlockStyle"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEAH,OAAO,CAACI,OAAR,GAAkB,UAAUC,WAAV,EAAuBC,KAAvB,EAA8B;AAC9C,MAAIC,SAAS,GAAGF,WAAW,CAACG,YAAZ,EAAhB;;AACA,MAAI,CAACD,SAAS,CAACE,WAAV,EAAD,IAA4BF,SAAS,CAACG,eAAV,EAA5B,IAA2DH,SAAS,CAACI,cAAV,EAA/D,EAA2F;AACzF,WAAO,IAAP;AACD,GAJ6C,CAM9C;;;AACA,MAAIC,OAAO,GAAGP,WAAW,CAACQ,iBAAZ,EAAd;AACA,MAAIC,QAAQ,GAAGP,SAAS,CAACQ,WAAV,EAAf;AACA,MAAIC,UAAU,GAAGJ,OAAO,CAACK,aAAR,CAAsBH,QAAtB,CAAjB,CAT8C,CAW9C;;AACA,MAAIE,UAAU,IAAIJ,OAAO,CAACM,cAAR,CAAuBJ,QAAvB,EAAiCK,SAAjC,OAAiD,CAAnE,EAAsE;AACpE,WAAO,IAAP;AACD;;AAED,MAAIC,WAAW,GAAGR,OAAO,CAACS,cAAR,CAAuBP,QAAvB,CAAlB;;AAEA,MAAIM,WAAW,IAAId,KAAK,CAACgB,OAAN,CAAcF,WAAW,CAACG,OAAZ,EAAd,MAAyC,CAAC,CAA7D,EAAgE;AAC9D,QAAIC,iBAAiB,GAAGjB,SAAS,CAACkB,KAAV,CAAgB;AACtCC,MAAAA,SAAS,EAAEN,WAAW,CAACO,MAAZ,EAD2B;AAEtCC,MAAAA,YAAY,EAAE;AAFwB,KAAhB,CAAxB;;AAIA,QAAIC,cAAc,GAAG3B,QAAQ,CAAC4B,QAAT,CAAkBC,YAAlB,CAA+BnB,OAA/B,EAAwCY,iBAAxC,EAA2DZ,OAAO,CAACM,cAAR,CAAuBJ,QAAvB,EAAiCS,OAAjC,EAA3D,CAArB;;AACA,QAAIS,kBAAkB,GAAG9B,QAAQ,CAAC4B,QAAT,CAAkBG,WAAlB,CAA8BJ,cAA9B,EAA8CL,iBAA9C,EAAiE,UAAjE,CAAzB;;AACA,QAAIQ,kBAAkB,KAAKpB,OAA3B,EAAoC;AAClC,aAAOV,QAAQ,CAACgC,WAAT,CAAqBC,IAArB,CAA0B9B,WAA1B,EAAuC2B,kBAAvC,EAA2D,cAA3D,CAAP;AACD;AACF,GA5B6C,CA8B9C;;;AACA,MAAII,iBAAiB,GAAGlC,QAAQ,CAACmC,SAAT,CAAmBC,qBAAnB,CAAyCjC,WAAzC,CAAxB;;AAEA,MAAI+B,iBAAJ,EAAuB;AACrB,WAAOlC,QAAQ,CAACgC,WAAT,CAAqBC,IAArB,CAA0B9B,WAA1B,EAAuC+B,iBAAvC,EAA0D,mBAA1D,CAAP;AACD;;AAED,SAAO,IAAP;AACD,CAtCD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _draftJs = require('draft-js');\n\nexports.default = function (editorState, types) {\n  var selection = editorState.getSelection();\n  if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n    return null;\n  }\n\n  // First, try to remove a preceding atomic block.\n  var content = editorState.getCurrentContent();\n  var startKey = selection.getStartKey();\n  var blockAfter = content.getBlockAfter(startKey);\n\n  // If the current block is empty, just delete it.\n  if (blockAfter && content.getBlockForKey(startKey).getLength() === 0) {\n    return null;\n  }\n\n  var blockBefore = content.getBlockBefore(startKey);\n\n  if (blockBefore && types.indexOf(blockBefore.getType()) !== -1) {\n    var atomicBlockTarget = selection.merge({\n      anchorKey: blockBefore.getKey(),\n      anchorOffset: 0\n    });\n    var asCurrentStyle = _draftJs.Modifier.setBlockType(content, atomicBlockTarget, content.getBlockForKey(startKey).getType());\n    var withoutAtomicBlock = _draftJs.Modifier.removeRange(asCurrentStyle, atomicBlockTarget, 'backward');\n    if (withoutAtomicBlock !== content) {\n      return _draftJs.EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n  }\n\n  // If that doesn't succeed, try to remove the current block style.\n  var withoutBlockStyle = _draftJs.RichUtils.tryToRemoveBlockStyle(editorState);\n\n  if (withoutBlockStyle) {\n    return _draftJs.EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n  }\n\n  return null;\n};"]},"metadata":{},"sourceType":"script"}