{"ast":null,"code":"import cookie from 'js-cookie'; // set in cookie\n\nexport const setCookie = (key, value) => {\n  if (window !== 'undefined') {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n}; // remove from cookie\n\nexport const removeCookie = key => {\n  if (window !== 'undefined') {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n}; // get from cookie such as stored token\n// will be useful when we need to make request to server with token\n\nexport const getCookie = key => {\n  if (window !== 'undefined') {\n    return cookie.get(key);\n  }\n}; // set in localstorage\n\nexport const setLocalStorage = (key, value) => {\n  if (window !== 'undefined') {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n}; // remove from localstorage\n\nexport const removeLocalStorage = key => {\n  if (window !== 'undefined') {\n    localStorage.removeItem(key);\n  }\n}; // authenticate user by passing data to cookie and localstorage during signin\n\nexport const authenticate = (response, cb) => {\n  console.log('AUTHENTICATE HELPER ON SIGNIN RESPONSE', response);\n  setCookie('token', response.data.token);\n  setLocalStorage('user', response.data.user);\n  cb();\n}; // access user info from localstorage\n\nexport const isAuth = () => {\n  if (window !== 'undefined') {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/auth/helpers.js"],"names":["cookie","setCookie","key","value","window","set","expires","removeCookie","remove","getCookie","get","setLocalStorage","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","authenticate","response","cb","console","log","data","token","user","isAuth","cookieChecked","getItem","parse"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrC,MAAIC,MAAM,KAAK,WAAf,EAA4B;AACxBJ,IAAAA,MAAM,CAACK,GAAP,CAAWH,GAAX,EAAgBC,KAAhB,EAAuB;AACnBG,MAAAA,OAAO,EAAE;AADU,KAAvB;AAGH;AACJ,CANM,C,CAOP;;AACA,OAAO,MAAMC,YAAY,GAAGL,GAAG,IAAI;AAC/B,MAAIE,MAAM,KAAK,WAAf,EAA4B;AACxBJ,IAAAA,MAAM,CAACQ,MAAP,CAAcN,GAAd,EAAmB;AACfI,MAAAA,OAAO,EAAE;AADM,KAAnB;AAGH;AACJ,CANM,C,CAOP;AACA;;AACA,OAAO,MAAMG,SAAS,GAAGP,GAAG,IAAI;AAC5B,MAAIE,MAAM,KAAK,WAAf,EAA4B;AACxB,WAAOJ,MAAM,CAACU,GAAP,CAAWR,GAAX,CAAP;AACH;AACJ,CAJM,C,CAKP;;AACA,OAAO,MAAMS,eAAe,GAAG,CAACT,GAAD,EAAMC,KAAN,KAAgB;AAC3C,MAAIC,MAAM,KAAK,WAAf,EAA4B;AACxBQ,IAAAA,YAAY,CAACC,OAAb,CAAqBX,GAArB,EAA0BY,IAAI,CAACC,SAAL,CAAeZ,KAAf,CAA1B;AACH;AACJ,CAJM,C,CAKP;;AACA,OAAO,MAAMa,kBAAkB,GAAGd,GAAG,IAAI;AACrC,MAAIE,MAAM,KAAK,WAAf,EAA4B;AACxBQ,IAAAA,YAAY,CAACK,UAAb,CAAwBf,GAAxB;AACH;AACJ,CAJM,C,CAKP;;AACA,OAAO,MAAMgB,YAAY,GAAG,CAACC,QAAD,EAAWC,EAAX,KAAkB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDH,QAAtD;AACAlB,EAAAA,SAAS,CAAC,OAAD,EAAUkB,QAAQ,CAACI,IAAT,CAAcC,KAAxB,CAAT;AACAb,EAAAA,eAAe,CAAC,MAAD,EAASQ,QAAQ,CAACI,IAAT,CAAcE,IAAvB,CAAf;AACAL,EAAAA,EAAE;AACL,CALM,C,CAMP;;AACA,OAAO,MAAMM,MAAM,GAAG,MAAM;AACxB,MAAItB,MAAM,KAAK,WAAf,EAA4B;AACxB,UAAMuB,aAAa,GAAGlB,SAAS,CAAC,OAAD,CAA/B;;AACA,QAAIkB,aAAJ,EAAmB;AACf,UAAIf,YAAY,CAACgB,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAC9B,eAAOd,IAAI,CAACe,KAAL,CAAWjB,YAAY,CAACgB,OAAb,CAAqB,MAArB,CAAX,CAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ;AACJ;AACJ,CAXM","sourcesContent":["import cookie from 'js-cookie';\r\n\r\n// set in cookie\r\nexport const setCookie = (key, value) => {\r\n    if (window !== 'undefined') {\r\n        cookie.set(key, value, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n// remove from cookie\r\nexport const removeCookie = key => {\r\n    if (window !== 'undefined') {\r\n        cookie.remove(key, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n// get from cookie such as stored token\r\n// will be useful when we need to make request to server with token\r\nexport const getCookie = key => {\r\n    if (window !== 'undefined') {\r\n        return cookie.get(key);\r\n    }\r\n};\r\n// set in localstorage\r\nexport const setLocalStorage = (key, value) => {\r\n    if (window !== 'undefined') {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n};\r\n// remove from localstorage\r\nexport const removeLocalStorage = key => {\r\n    if (window !== 'undefined') {\r\n        localStorage.removeItem(key);\r\n    }\r\n};\r\n// authenticate user by passing data to cookie and localstorage during signin\r\nexport const authenticate = (response, cb) => {\r\n    console.log('AUTHENTICATE HELPER ON SIGNIN RESPONSE', response);\r\n    setCookie('token', response.data.token);\r\n    setLocalStorage('user', response.data.user);\r\n    cb();\r\n};\r\n// access user info from localstorage\r\nexport const isAuth = () => {\r\n    if (window !== 'undefined') {\r\n        const cookieChecked = getCookie('token');\r\n        if (cookieChecked) {\r\n            if (localStorage.getItem('user')) {\r\n                return JSON.parse(localStorage.getItem('user'));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}