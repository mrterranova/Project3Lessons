{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { getEntityRanges, BLOCK_TYPE, ENTITY_TYPE, INLINE_STYLE } from 'draft-js-utils';\nvar BOLD = INLINE_STYLE.BOLD,\n    CODE = INLINE_STYLE.CODE,\n    ITALIC = INLINE_STYLE.ITALIC,\n    STRIKETHROUGH = INLINE_STYLE.STRIKETHROUGH,\n    UNDERLINE = INLINE_STYLE.UNDERLINE;\nvar CODE_INDENT = '    ';\nvar defaultOptions = {\n  gfm: false\n};\n\nvar MarkupGenerator =\n/*#__PURE__*/\nfunction () {\n  function MarkupGenerator(contentState, options) {\n    _classCallCheck(this, MarkupGenerator);\n\n    _defineProperty(this, \"blocks\", void 0);\n\n    _defineProperty(this, \"contentState\", void 0);\n\n    _defineProperty(this, \"currentBlock\", void 0);\n\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"totalBlocks\", void 0);\n\n    _defineProperty(this, \"listItemCounts\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    this.contentState = contentState;\n    this.options = options || defaultOptions;\n  }\n\n  _createClass(MarkupGenerator, [{\n    key: \"generate\",\n    value: function generate() {\n      this.output = [];\n      this.blocks = this.contentState.getBlockMap().toArray();\n      this.totalBlocks = this.blocks.length;\n      this.currentBlock = 0;\n      this.listItemCounts = {};\n\n      while (this.currentBlock < this.totalBlocks) {\n        this.processBlock();\n      }\n\n      return this.output.join('');\n    }\n  }, {\n    key: \"processBlock\",\n    value: function processBlock() {\n      var block = this.blocks[this.currentBlock];\n      var blockType = block.getType();\n\n      switch (blockType) {\n        case BLOCK_TYPE.HEADER_ONE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('# ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_TWO:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('## ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_THREE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_FOUR:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('#### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_FIVE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('##### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_SIX:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('###### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.UNORDERED_LIST_ITEM:\n          {\n            var blockDepth = block.getDepth();\n            var lastBlock = this.getLastBlock();\n            var lastBlockType = lastBlock ? lastBlock.getType() : null;\n            var lastBlockDepth = lastBlock && canHaveDepth(lastBlockType) ? lastBlock.getDepth() : null;\n\n            if (lastBlockType !== blockType && lastBlockDepth !== blockDepth - 1) {\n              this.insertLineBreaks(1); // Insert an additional line break if following opposite list type.\n\n              if (lastBlockType === BLOCK_TYPE.ORDERED_LIST_ITEM) {\n                this.insertLineBreaks(1);\n              }\n            }\n\n            var indent = ' '.repeat(block.depth * 4);\n            this.output.push(indent + '- ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.ORDERED_LIST_ITEM:\n          {\n            var _blockDepth = block.getDepth();\n\n            var _lastBlock = this.getLastBlock();\n\n            var _lastBlockType = _lastBlock ? _lastBlock.getType() : null;\n\n            var _lastBlockDepth = _lastBlock && canHaveDepth(_lastBlockType) ? _lastBlock.getDepth() : null;\n\n            if (_lastBlockType !== blockType && _lastBlockDepth !== _blockDepth - 1) {\n              this.insertLineBreaks(1); // Insert an additional line break if following opposite list type.\n\n              if (_lastBlockType === BLOCK_TYPE.UNORDERED_LIST_ITEM) {\n                this.insertLineBreaks(1);\n              }\n            }\n\n            var _indent = ' '.repeat(_blockDepth * 4); // TODO: figure out what to do with two-digit numbers\n\n\n            var count = this.getListItemCount(block) % 10;\n            this.output.push(_indent + \"\".concat(count, \". \") + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.BLOCKQUOTE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push(' > ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.CODE:\n          {\n            this.insertLineBreaks(1);\n\n            if (this.options.gfm) {\n              var language = block.getData() && block.getData().get('language') ? block.getData().get('language') : '';\n              this.output.push(\"```\".concat(language, \"\\n\"));\n              this.output.push(this.renderBlockContent(block) + '\\n');\n              this.output.push('```\\n');\n            } else {\n              this.output.push(CODE_INDENT + this.renderBlockContent(block) + '\\n');\n            }\n\n            break;\n          }\n\n        default:\n          {\n            this.insertLineBreaks(1);\n            this.output.push(this.renderBlockContent(block) + '\\n');\n            break;\n          }\n      }\n\n      this.currentBlock += 1;\n    }\n  }, {\n    key: \"getLastBlock\",\n    value: function getLastBlock() {\n      return this.blocks[this.currentBlock - 1];\n    }\n  }, {\n    key: \"getNextBlock\",\n    value: function getNextBlock() {\n      return this.blocks[this.currentBlock + 1];\n    }\n  }, {\n    key: \"getListItemCount\",\n    value: function getListItemCount(block) {\n      var blockType = block.getType();\n      var blockDepth = block.getDepth(); // To decide if we need to start over we need to backtrack (skipping list\n      // items that are of greater depth)\n\n      var index = this.currentBlock - 1;\n      var prevBlock = this.blocks[index];\n\n      while (prevBlock && canHaveDepth(prevBlock.getType()) && prevBlock.getDepth() > blockDepth) {\n        index -= 1;\n        prevBlock = this.blocks[index];\n      }\n\n      if (!prevBlock || prevBlock.getType() !== blockType || prevBlock.getDepth() !== blockDepth) {\n        this.listItemCounts[blockDepth] = 0;\n      }\n\n      return this.listItemCounts[blockDepth] = this.listItemCounts[blockDepth] + 1;\n    }\n  }, {\n    key: \"insertLineBreaks\",\n    value: function insertLineBreaks(n) {\n      if (this.currentBlock > 0) {\n        for (var i = 0; i < n; i++) {\n          this.output.push('\\n');\n        }\n      }\n    }\n  }, {\n    key: \"renderBlockContent\",\n    value: function renderBlockContent(block) {\n      var contentState = this.contentState;\n      var blockType = block.getType();\n      var text = block.getText();\n\n      if (text === '') {\n        // Prevent element collapse if completely empty.\n        // TODO: Replace with constant.\n        return \"\\u200B\";\n      }\n\n      var charMetaList = block.getCharacterList();\n      var entityPieces = getEntityRanges(text, charMetaList);\n      return entityPieces.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            entityKey = _ref2[0],\n            stylePieces = _ref2[1];\n\n        var content = stylePieces.map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              text = _ref4[0],\n              style = _ref4[1]; // Don't allow empty inline elements.\n\n\n          if (!text) {\n            return '';\n          }\n\n          var content = text; // Don't encode any text inside a code block.\n\n          if (blockType === BLOCK_TYPE.CODE) {\n            return content;\n          } // NOTE: We attempt some basic character escaping here, although\n          // I don't know if escape sequences are really valid in markdown,\n          // there's not a canonical spec to lean on.\n\n\n          if (style.has(CODE)) {\n            return '`' + encodeCode(content) + '`';\n          }\n\n          content = encodeContent(text);\n\n          if (style.has(BOLD)) {\n            content = \"**\".concat(content, \"**\");\n          }\n\n          if (style.has(UNDERLINE)) {\n            // TODO: encode `+`?\n            content = \"++\".concat(content, \"++\");\n          }\n\n          if (style.has(ITALIC)) {\n            content = \"_\".concat(content, \"_\");\n          }\n\n          if (style.has(STRIKETHROUGH)) {\n            // TODO: encode `~`?\n            content = \"~~\".concat(content, \"~~\");\n          }\n\n          return content;\n        }).join('');\n        var entity = entityKey ? contentState.getEntity(entityKey) : null;\n\n        if (entity != null && entity.getType() === ENTITY_TYPE.LINK) {\n          var data = entity.getData();\n          var url = data.href || data.url || '';\n          var title = data.title ? \" \\\"\".concat(escapeTitle(data.title), \"\\\"\") : '';\n          return \"[\".concat(content, \"](\").concat(encodeURL(url)).concat(title, \")\");\n        } else if (entity != null && entity.getType() === ENTITY_TYPE.IMAGE) {\n          var _data = entity.getData();\n\n          var src = _data.src || '';\n          var alt = _data.alt ? \"\".concat(escapeTitle(_data.alt)) : '';\n          return \"![\".concat(alt, \"](\").concat(encodeURL(src), \")\");\n        } else if (entity != null && entity.getType() === ENTITY_TYPE.EMBED) {\n          return entity.getData().url || content;\n        } else {\n          return content;\n        }\n      }).join('');\n    }\n  }]);\n\n  return MarkupGenerator;\n}();\n\nfunction canHaveDepth(blockType) {\n  switch (blockType) {\n    case BLOCK_TYPE.UNORDERED_LIST_ITEM:\n    case BLOCK_TYPE.ORDERED_LIST_ITEM:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction encodeContent(text) {\n  return text.replace(/[*_`]/g, '\\\\$&');\n}\n\nfunction encodeCode(text) {\n  return text.replace(/`/g, '\\\\`');\n} // Encode chars that would normally be allowed in a URL but would conflict with\n// our markdown syntax: `[foo](http://foo/)`\n\n\nvar LINK_CHARACTER_REPLACEMENTS = {\n  '(': '%28',\n  ')': '%29'\n};\n\nfunction encodeURL(url) {\n  return url.replace(/[()]/g, function (_char) {\n    return LINK_CHARACTER_REPLACEMENTS[_char];\n  });\n} // Escape quotes using backslash.\n\n\nfunction escapeTitle(text) {\n  return text.replace(/\"/g, '\\\\\"');\n}\n\nexport default function stateToMarkdown(content, options) {\n  return new MarkupGenerator(content, options).generate();\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/node_modules/draft-js-export-markdown/esm/stateToMarkdown.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","getEntityRanges","BLOCK_TYPE","ENTITY_TYPE","INLINE_STYLE","BOLD","CODE","ITALIC","STRIKETHROUGH","UNDERLINE","CODE_INDENT","defaultOptions","gfm","MarkupGenerator","contentState","options","generate","output","blocks","getBlockMap","toArray","totalBlocks","currentBlock","listItemCounts","processBlock","join","block","blockType","getType","HEADER_ONE","insertLineBreaks","renderBlockContent","HEADER_TWO","HEADER_THREE","HEADER_FOUR","HEADER_FIVE","HEADER_SIX","UNORDERED_LIST_ITEM","blockDepth","getDepth","lastBlock","getLastBlock","lastBlockType","lastBlockDepth","canHaveDepth","ORDERED_LIST_ITEM","indent","repeat","depth","_blockDepth","_lastBlock","_lastBlockType","_lastBlockDepth","_indent","count","getListItemCount","concat","BLOCKQUOTE","language","getData","get","getNextBlock","index","prevBlock","n","text","getText","charMetaList","getCharacterList","entityPieces","map","_ref","_ref2","entityKey","stylePieces","content","_ref3","_ref4","style","has","encodeCode","encodeContent","entity","getEntity","LINK","data","url","href","title","escapeTitle","encodeURL","IMAGE","_data","src","alt","EMBED","replace","LINK_CHARACTER_REPLACEMENTS","_char","stateToMarkdown"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getEntityRanges, BLOCK_TYPE, ENTITY_TYPE, INLINE_STYLE } from 'draft-js-utils';\nvar BOLD = INLINE_STYLE.BOLD,\n    CODE = INLINE_STYLE.CODE,\n    ITALIC = INLINE_STYLE.ITALIC,\n    STRIKETHROUGH = INLINE_STYLE.STRIKETHROUGH,\n    UNDERLINE = INLINE_STYLE.UNDERLINE;\nvar CODE_INDENT = '    ';\nvar defaultOptions = {\n  gfm: false\n};\n\nvar MarkupGenerator =\n/*#__PURE__*/\nfunction () {\n  function MarkupGenerator(contentState, options) {\n    _classCallCheck(this, MarkupGenerator);\n\n    _defineProperty(this, \"blocks\", void 0);\n\n    _defineProperty(this, \"contentState\", void 0);\n\n    _defineProperty(this, \"currentBlock\", void 0);\n\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"totalBlocks\", void 0);\n\n    _defineProperty(this, \"listItemCounts\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    this.contentState = contentState;\n    this.options = options || defaultOptions;\n  }\n\n  _createClass(MarkupGenerator, [{\n    key: \"generate\",\n    value: function generate() {\n      this.output = [];\n      this.blocks = this.contentState.getBlockMap().toArray();\n      this.totalBlocks = this.blocks.length;\n      this.currentBlock = 0;\n      this.listItemCounts = {};\n\n      while (this.currentBlock < this.totalBlocks) {\n        this.processBlock();\n      }\n\n      return this.output.join('');\n    }\n  }, {\n    key: \"processBlock\",\n    value: function processBlock() {\n      var block = this.blocks[this.currentBlock];\n      var blockType = block.getType();\n\n      switch (blockType) {\n        case BLOCK_TYPE.HEADER_ONE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('# ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_TWO:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('## ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_THREE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_FOUR:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('#### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_FIVE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('##### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_SIX:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('###### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.UNORDERED_LIST_ITEM:\n          {\n            var blockDepth = block.getDepth();\n            var lastBlock = this.getLastBlock();\n            var lastBlockType = lastBlock ? lastBlock.getType() : null;\n            var lastBlockDepth = lastBlock && canHaveDepth(lastBlockType) ? lastBlock.getDepth() : null;\n\n            if (lastBlockType !== blockType && lastBlockDepth !== blockDepth - 1) {\n              this.insertLineBreaks(1); // Insert an additional line break if following opposite list type.\n\n              if (lastBlockType === BLOCK_TYPE.ORDERED_LIST_ITEM) {\n                this.insertLineBreaks(1);\n              }\n            }\n\n            var indent = ' '.repeat(block.depth * 4);\n            this.output.push(indent + '- ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.ORDERED_LIST_ITEM:\n          {\n            var _blockDepth = block.getDepth();\n\n            var _lastBlock = this.getLastBlock();\n\n            var _lastBlockType = _lastBlock ? _lastBlock.getType() : null;\n\n            var _lastBlockDepth = _lastBlock && canHaveDepth(_lastBlockType) ? _lastBlock.getDepth() : null;\n\n            if (_lastBlockType !== blockType && _lastBlockDepth !== _blockDepth - 1) {\n              this.insertLineBreaks(1); // Insert an additional line break if following opposite list type.\n\n              if (_lastBlockType === BLOCK_TYPE.UNORDERED_LIST_ITEM) {\n                this.insertLineBreaks(1);\n              }\n            }\n\n            var _indent = ' '.repeat(_blockDepth * 4); // TODO: figure out what to do with two-digit numbers\n\n\n            var count = this.getListItemCount(block) % 10;\n            this.output.push(_indent + \"\".concat(count, \". \") + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.BLOCKQUOTE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push(' > ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.CODE:\n          {\n            this.insertLineBreaks(1);\n\n            if (this.options.gfm) {\n              var language = block.getData() && block.getData().get('language') ? block.getData().get('language') : '';\n              this.output.push(\"```\".concat(language, \"\\n\"));\n              this.output.push(this.renderBlockContent(block) + '\\n');\n              this.output.push('```\\n');\n            } else {\n              this.output.push(CODE_INDENT + this.renderBlockContent(block) + '\\n');\n            }\n\n            break;\n          }\n\n        default:\n          {\n            this.insertLineBreaks(1);\n            this.output.push(this.renderBlockContent(block) + '\\n');\n            break;\n          }\n      }\n\n      this.currentBlock += 1;\n    }\n  }, {\n    key: \"getLastBlock\",\n    value: function getLastBlock() {\n      return this.blocks[this.currentBlock - 1];\n    }\n  }, {\n    key: \"getNextBlock\",\n    value: function getNextBlock() {\n      return this.blocks[this.currentBlock + 1];\n    }\n  }, {\n    key: \"getListItemCount\",\n    value: function getListItemCount(block) {\n      var blockType = block.getType();\n      var blockDepth = block.getDepth(); // To decide if we need to start over we need to backtrack (skipping list\n      // items that are of greater depth)\n\n      var index = this.currentBlock - 1;\n      var prevBlock = this.blocks[index];\n\n      while (prevBlock && canHaveDepth(prevBlock.getType()) && prevBlock.getDepth() > blockDepth) {\n        index -= 1;\n        prevBlock = this.blocks[index];\n      }\n\n      if (!prevBlock || prevBlock.getType() !== blockType || prevBlock.getDepth() !== blockDepth) {\n        this.listItemCounts[blockDepth] = 0;\n      }\n\n      return this.listItemCounts[blockDepth] = this.listItemCounts[blockDepth] + 1;\n    }\n  }, {\n    key: \"insertLineBreaks\",\n    value: function insertLineBreaks(n) {\n      if (this.currentBlock > 0) {\n        for (var i = 0; i < n; i++) {\n          this.output.push('\\n');\n        }\n      }\n    }\n  }, {\n    key: \"renderBlockContent\",\n    value: function renderBlockContent(block) {\n      var contentState = this.contentState;\n      var blockType = block.getType();\n      var text = block.getText();\n\n      if (text === '') {\n        // Prevent element collapse if completely empty.\n        // TODO: Replace with constant.\n        return \"\\u200B\";\n      }\n\n      var charMetaList = block.getCharacterList();\n      var entityPieces = getEntityRanges(text, charMetaList);\n      return entityPieces.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            entityKey = _ref2[0],\n            stylePieces = _ref2[1];\n\n        var content = stylePieces.map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              text = _ref4[0],\n              style = _ref4[1];\n\n          // Don't allow empty inline elements.\n          if (!text) {\n            return '';\n          }\n\n          var content = text; // Don't encode any text inside a code block.\n\n          if (blockType === BLOCK_TYPE.CODE) {\n            return content;\n          } // NOTE: We attempt some basic character escaping here, although\n          // I don't know if escape sequences are really valid in markdown,\n          // there's not a canonical spec to lean on.\n\n\n          if (style.has(CODE)) {\n            return '`' + encodeCode(content) + '`';\n          }\n\n          content = encodeContent(text);\n\n          if (style.has(BOLD)) {\n            content = \"**\".concat(content, \"**\");\n          }\n\n          if (style.has(UNDERLINE)) {\n            // TODO: encode `+`?\n            content = \"++\".concat(content, \"++\");\n          }\n\n          if (style.has(ITALIC)) {\n            content = \"_\".concat(content, \"_\");\n          }\n\n          if (style.has(STRIKETHROUGH)) {\n            // TODO: encode `~`?\n            content = \"~~\".concat(content, \"~~\");\n          }\n\n          return content;\n        }).join('');\n        var entity = entityKey ? contentState.getEntity(entityKey) : null;\n\n        if (entity != null && entity.getType() === ENTITY_TYPE.LINK) {\n          var data = entity.getData();\n          var url = data.href || data.url || '';\n          var title = data.title ? \" \\\"\".concat(escapeTitle(data.title), \"\\\"\") : '';\n          return \"[\".concat(content, \"](\").concat(encodeURL(url)).concat(title, \")\");\n        } else if (entity != null && entity.getType() === ENTITY_TYPE.IMAGE) {\n          var _data = entity.getData();\n\n          var src = _data.src || '';\n          var alt = _data.alt ? \"\".concat(escapeTitle(_data.alt)) : '';\n          return \"![\".concat(alt, \"](\").concat(encodeURL(src), \")\");\n        } else if (entity != null && entity.getType() === ENTITY_TYPE.EMBED) {\n          return entity.getData().url || content;\n        } else {\n          return content;\n        }\n      }).join('');\n    }\n  }]);\n\n  return MarkupGenerator;\n}();\n\nfunction canHaveDepth(blockType) {\n  switch (blockType) {\n    case BLOCK_TYPE.UNORDERED_LIST_ITEM:\n    case BLOCK_TYPE.ORDERED_LIST_ITEM:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction encodeContent(text) {\n  return text.replace(/[*_`]/g, '\\\\$&');\n}\n\nfunction encodeCode(text) {\n  return text.replace(/`/g, '\\\\`');\n} // Encode chars that would normally be allowed in a URL but would conflict with\n// our markdown syntax: `[foo](http://foo/)`\n\n\nvar LINK_CHARACTER_REPLACEMENTS = {\n  '(': '%28',\n  ')': '%29'\n};\n\nfunction encodeURL(url) {\n  return url.replace(/[()]/g, function (_char) {\n    return LINK_CHARACTER_REPLACEMENTS[_char];\n  });\n} // Escape quotes using backslash.\n\n\nfunction escapeTitle(text) {\n  return text.replace(/\"/g, '\\\\\"');\n}\n\nexport default function stateToMarkdown(content, options) {\n  return new MarkupGenerator(content, options).generate();\n}"]},"metadata":{},"sourceType":"module"}