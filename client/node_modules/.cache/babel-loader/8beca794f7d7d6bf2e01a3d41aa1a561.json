{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\src\\\\core\\\\pages\\\\Admin\\\\components\\\\lib\\\\EditorToolbar.js\";\nimport { hasCommandModifier } from 'draft-js/lib/KeyBindingUtil';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { EditorState, Entity, EntityDescription, RichUtils, Modifier } from 'draft-js';\nimport { ENTITY_TYPE } from 'draft-js-utils';\nimport DefaultToolbarConfig from './EditorToolbarConfig';\nimport StyleButton from './StyleButton';\nimport PopoverIconButton from '../ui/PopoverIconButton';\nimport ButtonGroup from '../ui/ButtonGroup';\nimport Dropdown from '../ui/Dropdown';\nimport IconButton from '../ui/IconButton';\nimport getEntityAtCursor from './getEntityAtCursor';\nimport clearEntityForRange from './clearEntityForRange';\nimport autobind from 'class-autobind';\nimport cx from 'classnames';\nimport styles from './EditorToolbar.css';\nexport default class EditorToolbar extends Component {\n  constructor() {\n    super(...arguments);\n    autobind(this);\n    this.state = {\n      showLinkInput: false,\n      showImageInput: false,\n      customControlState: {}\n    };\n  }\n\n  componentWillMount() {\n    // Technically, we should also attach/detach event listeners when the\n    // `keyEmitter` prop changes.\n    this.props.keyEmitter.on('keypress', this._onKeypress);\n  }\n\n  componentWillUnmount() {\n    this.props.keyEmitter.removeListener('keypress', this._onKeypress);\n  }\n\n  render() {\n    let _this$props = this.props,\n        className = _this$props.className,\n        toolbarConfig = _this$props.toolbarConfig,\n        rootStyle = _this$props.rootStyle,\n        isOnBottom = _this$props.isOnBottom;\n\n    if (toolbarConfig == null) {\n      toolbarConfig = DefaultToolbarConfig;\n    }\n\n    let display = toolbarConfig.display || DefaultToolbarConfig.display;\n    let buttonGroups = display.map(groupName => {\n      switch (groupName) {\n        case 'INLINE_STYLE_BUTTONS':\n          {\n            return this._renderInlineStyleButtons(groupName, toolbarConfig);\n          }\n\n        case 'BLOCK_TYPE_DROPDOWN':\n          {\n            return this._renderBlockTypeDropdown(groupName, toolbarConfig);\n          }\n\n        case 'LINK_BUTTONS':\n          {\n            return this._renderLinkButtons(groupName, toolbarConfig);\n          }\n\n        case 'IMAGE_BUTTON':\n          {\n            return this._renderImageButton(groupName, toolbarConfig);\n          }\n\n        case 'BLOCK_TYPE_BUTTONS':\n          {\n            return this._renderBlockTypeButtons(groupName, toolbarConfig);\n          }\n\n        case 'HISTORY_BUTTONS':\n          {\n            return this._renderUndoRedo(groupName, toolbarConfig);\n          }\n      }\n    });\n    return React.createElement(\"div\", {\n      className: cx(styles.root, isOnBottom && styles.onBottom, className),\n      style: rootStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, buttonGroups, this._renderCustomControls());\n  }\n\n  _renderCustomControls() {\n    let _this$props2 = this.props,\n        customControls = _this$props2.customControls,\n        editorState = _this$props2.editorState;\n\n    if (customControls == null) {\n      return;\n    }\n\n    return customControls.map(f => {\n      switch (typeof f) {\n        case 'function':\n          {\n            return f(this._setCustomControlState, this._getCustomControlState, editorState);\n          }\n\n        default:\n          {\n            return f;\n          }\n      }\n    });\n  }\n\n  _setCustomControlState(key, value) {\n    this.setState(({\n      customControlState\n    }) => ({\n      customControlState: _objectSpread({}, customControlState, {\n        [key]: value\n      })\n    }));\n  }\n\n  _getCustomControlState(key) {\n    return this.state.customControlState[key];\n  }\n\n  _renderBlockTypeDropdown(name, toolbarConfig) {\n    let blockType = this._getCurrentBlockType();\n\n    let choices = new Map((toolbarConfig.BLOCK_TYPE_DROPDOWN || []).map(type => [type.style, {\n      label: type.label,\n      className: type.className\n    }]));\n\n    if (!choices.has(blockType)) {\n      blockType = Array.from(choices.keys())[0];\n    }\n\n    return React.createElement(ButtonGroup, {\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Dropdown, Object.assign({}, toolbarConfig.extraProps, {\n      choices: choices,\n      selectedKey: blockType,\n      onChange: this._selectBlockType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })));\n  }\n\n  _renderBlockTypeButtons(name, toolbarConfig) {\n    let blockType = this._getCurrentBlockType();\n\n    let buttons = (toolbarConfig.BLOCK_TYPE_BUTTONS || []).map((type, index) => React.createElement(StyleButton, Object.assign({}, toolbarConfig.extraProps, {\n      key: String(index),\n      isActive: type.style === blockType,\n      label: type.label,\n      onToggle: this._toggleBlockType,\n      style: type.style,\n      className: type.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })));\n    return React.createElement(ButtonGroup, {\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, buttons);\n  }\n\n  _renderInlineStyleButtons(name, toolbarConfig) {\n    let editorState = this.props.editorState;\n    let currentStyle = editorState.getCurrentInlineStyle();\n    let buttons = (toolbarConfig.INLINE_STYLE_BUTTONS || []).map((type, index) => React.createElement(StyleButton, Object.assign({}, toolbarConfig.extraProps, {\n      key: String(index),\n      isActive: currentStyle.has(type.style),\n      label: type.label,\n      onToggle: this._toggleInlineStyle,\n      style: type.style,\n      className: type.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })));\n    return React.createElement(ButtonGroup, {\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, buttons);\n  }\n\n  _renderLinkButtons(name, toolbarConfig) {\n    let editorState = this.props.editorState;\n    let selection = editorState.getSelection();\n\n    let entity = this._getEntityAtCursor();\n\n    let hasSelection = !selection.isCollapsed();\n    let isCursorOnLink = entity != null && entity.type === ENTITY_TYPE.LINK;\n    let shouldShowLinkButton = hasSelection || isCursorOnLink;\n    let defaultValue = entity && isCursorOnLink ? entity.getData().url : '';\n    const config = toolbarConfig.LINK_BUTTONS || {};\n    const linkConfig = config.link || {};\n    const removeLinkConfig = config.removeLink || {};\n    const linkLabel = linkConfig.label || 'Link';\n    const removeLinkLabel = removeLinkConfig.label || 'Remove Link';\n    return React.createElement(ButtonGroup, {\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(PopoverIconButton, {\n      label: linkLabel,\n      iconName: \"link\",\n      isDisabled: !shouldShowLinkButton,\n      showPopover: this.state.showLinkInput,\n      onTogglePopover: this._toggleShowLinkInput,\n      defaultValue: defaultValue,\n      onSubmit: this._setLink,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(IconButton, Object.assign({}, toolbarConfig.extraProps, {\n      label: removeLinkLabel,\n      iconName: \"remove-link\",\n      isDisabled: !isCursorOnLink,\n      onClick: this._removeLink,\n      focusOnClick: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })));\n  }\n\n  _renderImageButton(name, toolbarConfig) {\n    const config = toolbarConfig.IMAGE_BUTTON || {};\n    const label = config.label || 'Image';\n    return React.createElement(ButtonGroup, {\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(PopoverIconButton, {\n      label: label,\n      iconName: \"image\",\n      showPopover: this.state.showImageInput,\n      onTogglePopover: this._toggleShowImageInput,\n      onSubmit: this._setImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }));\n  }\n\n  _renderUndoRedo(name, toolbarConfig) {\n    let editorState = this.props.editorState;\n    let canUndo = editorState.getUndoStack().size !== 0;\n    let canRedo = editorState.getRedoStack().size !== 0;\n    const config = toolbarConfig.HISTORY_BUTTONS || {};\n    const undoConfig = config.undo || {};\n    const redoConfig = config.redo || {};\n    const undoLabel = undoConfig.label || 'Undo';\n    const redoLabel = redoConfig.label || 'Redo';\n    return React.createElement(ButtonGroup, {\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(IconButton, Object.assign({}, toolbarConfig.extraProps, {\n      label: undoLabel,\n      iconName: \"undo\",\n      isDisabled: !canUndo,\n      onClick: this._undo,\n      focusOnClick: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    })), React.createElement(IconButton, Object.assign({}, toolbarConfig.extraProps, {\n      label: redoLabel,\n      iconName: \"redo\",\n      isDisabled: !canRedo,\n      onClick: this._redo,\n      focusOnClick: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    })));\n  }\n\n  _onKeypress(event, eventFlags) {\n    // Catch cmd+k for use with link insertion.\n    if (hasCommandModifier(event) && event.keyCode === 75) {\n      let editorState = this.props.editorState;\n\n      if (!editorState.getSelection().isCollapsed()) {\n        this.setState({\n          showLinkInput: true\n        });\n        eventFlags.wasHandled = true;\n      }\n    }\n  }\n\n  _toggleShowLinkInput(event) {\n    let isShowing = this.state.showLinkInput; // If this is a hide request, decide if we should focus the editor.\n\n    if (isShowing) {\n      let shouldFocusEditor = true;\n\n      if (event && event.type === 'click') {\n        // TODO: Use a better way to get the editor root node.\n        let editorRoot = ReactDOM.findDOMNode(this).parentNode;\n        let _document = document,\n            activeElement = _document.activeElement;\n        let wasClickAway = activeElement == null || activeElement === document.body;\n\n        if (!wasClickAway && !editorRoot.contains(activeElement)) {\n          shouldFocusEditor = false;\n        }\n      }\n\n      if (shouldFocusEditor) {\n        this.props.focusEditor();\n      }\n    }\n\n    this.setState({\n      showLinkInput: !isShowing\n    });\n  }\n\n  _toggleShowImageInput(event) {\n    let isShowing = this.state.showImageInput; // If this is a hide request, decide if we should focus the editor.\n\n    if (isShowing) {\n      let shouldFocusEditor = true;\n\n      if (event && event.type === 'click') {\n        // TODO: Use a better way to get the editor root node.\n        let editorRoot = ReactDOM.findDOMNode(this).parentNode;\n        let _document2 = document,\n            activeElement = _document2.activeElement;\n        let wasClickAway = activeElement == null || activeElement === document.body;\n\n        if (!wasClickAway && !editorRoot.contains(activeElement)) {\n          shouldFocusEditor = false;\n        }\n      }\n\n      if (shouldFocusEditor) {\n        this.props.focusEditor();\n      }\n    }\n\n    this.setState({\n      showImageInput: !isShowing\n    });\n  }\n\n  _setImage(src) {\n    let editorState = this.props.editorState;\n    let contentState = editorState.getCurrentContent();\n    let selection = editorState.getSelection();\n    contentState = contentState.createEntity(ENTITY_TYPE.IMAGE, 'IMMUTABLE', {\n      src\n    });\n    let entityKey = contentState.getLastCreatedEntityKey();\n    let newContentState = Modifier.insertText(contentState, selection, ' ', null, entityKey);\n    this.setState({\n      showImageInput: false\n    });\n    this.props.onChange(EditorState.push(editorState, newContentState));\n\n    this._focusEditor();\n  }\n\n  _setLink(url) {\n    let editorState = this.props.editorState;\n    let contentState = editorState.getCurrentContent();\n    let selection = editorState.getSelection();\n    let origSelection = selection;\n    let canApplyLink = false;\n\n    if (selection.isCollapsed()) {\n      let entity = this._getEntityDescriptionAtCursor();\n\n      if (entity) {\n        canApplyLink = true;\n        selection = selection.merge({\n          anchorOffset: entity.startOffset,\n          focusOffset: entity.endOffset,\n          isBackward: false\n        });\n      }\n    } else {\n      canApplyLink = true;\n    }\n\n    this.setState({\n      showLinkInput: false\n    });\n\n    if (canApplyLink) {\n      contentState = contentState.createEntity(ENTITY_TYPE.LINK, 'MUTABLE', {\n        url\n      });\n      let entityKey = contentState.getLastCreatedEntityKey();\n      editorState = EditorState.push(editorState, contentState);\n      editorState = RichUtils.toggleLink(editorState, selection, entityKey);\n      editorState = EditorState.acceptSelection(editorState, origSelection);\n      this.props.onChange(editorState);\n    }\n\n    this._focusEditor();\n  }\n\n  _removeLink() {\n    let editorState = this.props.editorState;\n    let entity = getEntityAtCursor(editorState);\n\n    if (entity != null) {\n      let blockKey = entity.blockKey,\n          startOffset = entity.startOffset,\n          endOffset = entity.endOffset;\n      this.props.onChange(clearEntityForRange(editorState, blockKey, startOffset, endOffset));\n    }\n  }\n\n  _getEntityDescriptionAtCursor() {\n    let editorState = this.props.editorState;\n    return getEntityAtCursor(editorState);\n  }\n\n  _getEntityAtCursor() {\n    let editorState = this.props.editorState;\n    let contentState = editorState.getCurrentContent();\n    let entity = getEntityAtCursor(editorState);\n    return entity == null ? null : contentState.getEntity(entity.entityKey);\n  }\n\n  _getCurrentBlockType() {\n    let editorState = this.props.editorState;\n    let selection = editorState.getSelection();\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  }\n\n  _selectBlockType() {\n    this._toggleBlockType(...arguments);\n\n    this._focusEditor();\n  }\n\n  _toggleBlockType(blockType) {\n    this.props.onChange(RichUtils.toggleBlockType(this.props.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.props.onChange(RichUtils.toggleInlineStyle(this.props.editorState, inlineStyle));\n  }\n\n  _undo() {\n    let editorState = this.props.editorState;\n    this.props.onChange(EditorState.undo(editorState));\n  }\n\n  _redo() {\n    let editorState = this.props.editorState;\n    this.props.onChange(EditorState.redo(editorState));\n  }\n\n  _focusEditor() {\n    // Hacky: Wait to focus the editor so we don't lose selection.\n    setTimeout(() => {\n      this.props.focusEditor();\n    }, 50);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/core/pages/Admin/components/lib/EditorToolbar.js"],"names":["hasCommandModifier","React","Component","ReactDOM","EditorState","Entity","EntityDescription","RichUtils","Modifier","ENTITY_TYPE","DefaultToolbarConfig","StyleButton","PopoverIconButton","ButtonGroup","Dropdown","IconButton","getEntityAtCursor","clearEntityForRange","autobind","cx","styles","EditorToolbar","constructor","arguments","state","showLinkInput","showImageInput","customControlState","componentWillMount","props","keyEmitter","on","_onKeypress","componentWillUnmount","removeListener","render","className","toolbarConfig","rootStyle","isOnBottom","display","buttonGroups","map","groupName","_renderInlineStyleButtons","_renderBlockTypeDropdown","_renderLinkButtons","_renderImageButton","_renderBlockTypeButtons","_renderUndoRedo","root","onBottom","_renderCustomControls","customControls","editorState","f","_setCustomControlState","_getCustomControlState","key","value","setState","name","blockType","_getCurrentBlockType","choices","Map","BLOCK_TYPE_DROPDOWN","type","style","label","has","Array","from","keys","extraProps","_selectBlockType","buttons","BLOCK_TYPE_BUTTONS","index","String","_toggleBlockType","currentStyle","getCurrentInlineStyle","INLINE_STYLE_BUTTONS","_toggleInlineStyle","selection","getSelection","entity","_getEntityAtCursor","hasSelection","isCollapsed","isCursorOnLink","LINK","shouldShowLinkButton","defaultValue","getData","url","config","LINK_BUTTONS","linkConfig","link","removeLinkConfig","removeLink","linkLabel","removeLinkLabel","_toggleShowLinkInput","_setLink","_removeLink","IMAGE_BUTTON","_toggleShowImageInput","_setImage","canUndo","getUndoStack","size","canRedo","getRedoStack","HISTORY_BUTTONS","undoConfig","undo","redoConfig","redo","undoLabel","redoLabel","_undo","_redo","event","eventFlags","keyCode","wasHandled","isShowing","shouldFocusEditor","editorRoot","findDOMNode","parentNode","document","activeElement","wasClickAway","body","contains","focusEditor","src","contentState","getCurrentContent","createEntity","IMAGE","entityKey","getLastCreatedEntityKey","newContentState","insertText","onChange","push","_focusEditor","origSelection","canApplyLink","_getEntityDescriptionAtCursor","merge","anchorOffset","startOffset","focusOffset","endOffset","isBackward","toggleLink","acceptSelection","blockKey","getEntity","getBlockForKey","getStartKey","getType","toggleBlockType","inlineStyle","toggleInlineStyle","setTimeout"],"mappings":"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","sourcesContent":["/* @flow */\nimport {hasCommandModifier} from 'draft-js/lib/KeyBindingUtil';\n\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {EditorState, Entity, EntityDescription, RichUtils, Modifier} from 'draft-js';\nimport {ENTITY_TYPE} from 'draft-js-utils';\nimport DefaultToolbarConfig from './EditorToolbarConfig';\nimport StyleButton from './StyleButton';\nimport PopoverIconButton from '../ui/PopoverIconButton';\nimport ButtonGroup from '../ui/ButtonGroup';\nimport Dropdown from '../ui/Dropdown';\nimport IconButton from '../ui/IconButton';\nimport getEntityAtCursor from './getEntityAtCursor';\nimport clearEntityForRange from './clearEntityForRange';\nimport autobind from 'class-autobind';\nimport cx from 'classnames';\n\nimport styles from './EditorToolbar.css';\n\nimport type EventEmitter from 'events';\nimport type {ToolbarConfig, CustomControl} from './EditorToolbarConfig';\n\ntype ChangeHandler = (state: EditorState) => any;\n\ntype Props = {\n  className?: string;\n  editorState: EditorState;\n  keyEmitter: EventEmitter;\n  onChange: ChangeHandler;\n  focusEditor: Function;\n  toolbarConfig: ToolbarConfig;\n  customControls: Array<CustomControl>;\n  rootStyle?: Object;\n  isOnBottom?: boolean;\n};\n\ntype State = {\n  showLinkInput: boolean;\n  showImageInput: boolean;\n  customControlState: {[key: string]: string};\n};\n\n\nexport default class EditorToolbar extends Component {\n  props: Props;\n  state: State;\n\n  constructor() {\n    super(...arguments);\n    autobind(this);\n    this.state = {\n      showLinkInput: false,\n      showImageInput: false,\n      customControlState: {},\n    };\n  }\n\n  componentWillMount() {\n    // Technically, we should also attach/detach event listeners when the\n    // `keyEmitter` prop changes.\n    this.props.keyEmitter.on('keypress', this._onKeypress);\n  }\n\n  componentWillUnmount() {\n    this.props.keyEmitter.removeListener('keypress', this._onKeypress);\n  }\n\n  render() {\n    let {className, toolbarConfig, rootStyle, isOnBottom} = this.props;\n    if (toolbarConfig == null) {\n      toolbarConfig = DefaultToolbarConfig;\n    }\n    let display = toolbarConfig.display || DefaultToolbarConfig.display;\n    let buttonGroups = display.map((groupName) => {\n      switch (groupName) {\n        case 'INLINE_STYLE_BUTTONS': {\n          return this._renderInlineStyleButtons(groupName, toolbarConfig);\n        }\n        case 'BLOCK_TYPE_DROPDOWN': {\n          return this._renderBlockTypeDropdown(groupName, toolbarConfig);\n        }\n        case 'LINK_BUTTONS': {\n          return this._renderLinkButtons(groupName, toolbarConfig);\n        }\n        case 'IMAGE_BUTTON': {\n          return this._renderImageButton(groupName, toolbarConfig);\n        }\n        case 'BLOCK_TYPE_BUTTONS': {\n          return this._renderBlockTypeButtons(groupName, toolbarConfig);\n        }\n        case 'HISTORY_BUTTONS': {\n          return this._renderUndoRedo(groupName, toolbarConfig);\n        }\n      }\n    });\n    return (\n      <div className={cx(styles.root, (isOnBottom && styles.onBottom), className)} style={rootStyle}>\n        {buttonGroups}\n        {this._renderCustomControls()}\n      </div>\n    );\n  }\n\n  _renderCustomControls() {\n    let {customControls, editorState} = this.props;\n    if (customControls == null) {\n      return;\n    }\n    return customControls.map((f) => {\n      switch (typeof f) {\n        case 'function': {\n          return f(\n            this._setCustomControlState,\n            this._getCustomControlState,\n            editorState\n          );\n        }\n        default: {\n          return f;\n        }\n      }\n    });\n  }\n\n  _setCustomControlState(key: string, value: string) {\n    this.setState(({customControlState}) => ({\n      customControlState: {...customControlState, [key]: value},\n    }));\n  }\n\n  _getCustomControlState(key: string) {\n    return this.state.customControlState[key];\n  }\n\n  _renderBlockTypeDropdown(name: string, toolbarConfig: ToolbarConfig) {\n    let blockType = this._getCurrentBlockType();\n    let choices = new Map(\n      (toolbarConfig.BLOCK_TYPE_DROPDOWN || []).map((type) => [type.style, {label: type.label, className: type.className}])\n    );\n    if (!choices.has(blockType)) {\n      blockType = Array.from(choices.keys())[0];\n    }\n    return (\n      <ButtonGroup key={name}>\n        <Dropdown\n          {...toolbarConfig.extraProps}\n          choices={choices}\n          selectedKey={blockType}\n          onChange={this._selectBlockType}\n        />\n      </ButtonGroup>\n    );\n  }\n\n  _renderBlockTypeButtons(name: string, toolbarConfig: ToolbarConfig) {\n    let blockType = this._getCurrentBlockType();\n    let buttons = (toolbarConfig.BLOCK_TYPE_BUTTONS || []).map((type, index) => (\n      <StyleButton\n        {...toolbarConfig.extraProps}\n        key={String(index)}\n        isActive={type.style === blockType}\n        label={type.label}\n        onToggle={this._toggleBlockType}\n        style={type.style}\n        className={type.className}\n      />\n    ));\n    return (\n      <ButtonGroup key={name}>{buttons}</ButtonGroup>\n    );\n  }\n\n  _renderInlineStyleButtons(name: string, toolbarConfig: ToolbarConfig) {\n    let {editorState} = this.props;\n    let currentStyle = editorState.getCurrentInlineStyle();\n    let buttons = (toolbarConfig.INLINE_STYLE_BUTTONS || []).map((type, index) => (\n      <StyleButton\n        {...toolbarConfig.extraProps}\n        key={String(index)}\n        isActive={currentStyle.has(type.style)}\n        label={type.label}\n        onToggle={this._toggleInlineStyle}\n        style={type.style}\n        className={type.className}\n      />\n    ));\n    return (\n      <ButtonGroup key={name}>{buttons}</ButtonGroup>\n    );\n  }\n\n  _renderLinkButtons(name: string, toolbarConfig: ToolbarConfig) {\n    let {editorState} = this.props;\n    let selection = editorState.getSelection();\n    let entity = this._getEntityAtCursor();\n    let hasSelection = !selection.isCollapsed();\n    let isCursorOnLink = (entity != null && entity.type === ENTITY_TYPE.LINK);\n    let shouldShowLinkButton = hasSelection || isCursorOnLink;\n    let defaultValue = (entity && isCursorOnLink) ? entity.getData().url : '';\n    const config = toolbarConfig.LINK_BUTTONS || {};\n    const linkConfig = config.link || {};\n    const removeLinkConfig = config.removeLink || {};\n    const linkLabel = linkConfig.label || 'Link';\n    const removeLinkLabel = removeLinkConfig.label || 'Remove Link';\n\n    return (\n      <ButtonGroup key={name}>\n        <PopoverIconButton\n          label={linkLabel}\n          iconName=\"link\"\n          isDisabled={!shouldShowLinkButton}\n          showPopover={this.state.showLinkInput}\n          onTogglePopover={this._toggleShowLinkInput}\n          defaultValue={defaultValue}\n          onSubmit={this._setLink}\n        />\n        <IconButton\n          {...toolbarConfig.extraProps}\n          label={removeLinkLabel}\n          iconName=\"remove-link\"\n          isDisabled={!isCursorOnLink}\n          onClick={this._removeLink}\n          focusOnClick={false}\n        />\n      </ButtonGroup>\n    );\n  }\n\n  _renderImageButton(name: string, toolbarConfig: ToolbarConfig) {\n    const config = (toolbarConfig.IMAGE_BUTTON || {});\n    const label = config.label || 'Image';\n    return (\n      <ButtonGroup key={name}>\n        <PopoverIconButton\n          label={label}\n          iconName=\"image\"\n          showPopover={this.state.showImageInput}\n          onTogglePopover={this._toggleShowImageInput}\n          onSubmit={this._setImage}\n        />\n      </ButtonGroup>\n    );\n  }\n\n  _renderUndoRedo(name: string, toolbarConfig: ToolbarConfig) {\n    let {editorState} = this.props;\n    let canUndo = editorState.getUndoStack().size !== 0;\n    let canRedo = editorState.getRedoStack().size !== 0;\n    const config = toolbarConfig.HISTORY_BUTTONS || {};\n    const undoConfig = config.undo || {};\n    const redoConfig = config.redo || {};\n    const undoLabel = undoConfig.label || 'Undo';\n    const redoLabel = redoConfig.label || 'Redo';\n    return (\n      <ButtonGroup key={name}>\n        <IconButton\n          {...toolbarConfig.extraProps}\n          label={undoLabel}\n          iconName=\"undo\"\n          isDisabled={!canUndo}\n          onClick={this._undo}\n          focusOnClick={false}\n        />\n        <IconButton\n          {...toolbarConfig.extraProps}\n          label={redoLabel}\n          iconName=\"redo\"\n          isDisabled={!canRedo}\n          onClick={this._redo}\n          focusOnClick={false}\n        />\n      </ButtonGroup>\n    );\n  }\n\n  _onKeypress(event: Object, eventFlags: Object) {\n    // Catch cmd+k for use with link insertion.\n    if (hasCommandModifier(event) && event.keyCode === 75) {\n      let {editorState} = this.props;\n      if (!editorState.getSelection().isCollapsed()) {\n        this.setState({showLinkInput: true});\n        eventFlags.wasHandled = true;\n      }\n    }\n  }\n\n  _toggleShowLinkInput(event: ?Object) {\n    let isShowing = this.state.showLinkInput;\n    // If this is a hide request, decide if we should focus the editor.\n    if (isShowing) {\n      let shouldFocusEditor = true;\n      if (event && event.type === 'click') {\n        // TODO: Use a better way to get the editor root node.\n        let editorRoot = ReactDOM.findDOMNode(this).parentNode;\n        let {activeElement} = document;\n        let wasClickAway = (activeElement == null || activeElement === document.body);\n        if (!wasClickAway && !editorRoot.contains(activeElement)) {\n          shouldFocusEditor = false;\n        }\n      }\n      if (shouldFocusEditor) {\n        this.props.focusEditor();\n      }\n    }\n    this.setState({showLinkInput: !isShowing});\n  }\n\n  _toggleShowImageInput(event: ?Object) {\n    let isShowing = this.state.showImageInput;\n    // If this is a hide request, decide if we should focus the editor.\n    if (isShowing) {\n      let shouldFocusEditor = true;\n      if (event && event.type === 'click') {\n        // TODO: Use a better way to get the editor root node.\n        let editorRoot = ReactDOM.findDOMNode(this).parentNode;\n        let {activeElement} = document;\n        let wasClickAway = (activeElement == null || activeElement === document.body);\n        if (!wasClickAway && !editorRoot.contains(activeElement)) {\n          shouldFocusEditor = false;\n        }\n      }\n      if (shouldFocusEditor) {\n        this.props.focusEditor();\n      }\n    }\n    this.setState({showImageInput: !isShowing});\n  }\n\n  _setImage(src: string) {\n    let {editorState} = this.props;\n    let contentState = editorState.getCurrentContent();\n    let selection = editorState.getSelection();\n    contentState = contentState.createEntity(ENTITY_TYPE.IMAGE, 'IMMUTABLE', {src});\n    let entityKey = contentState.getLastCreatedEntityKey();\n    let newContentState = Modifier.insertText(contentState, selection, ' ', null, entityKey);\n    this.setState({showImageInput: false});\n    this.props.onChange(\n      EditorState.push(editorState, newContentState)\n    );\n    this._focusEditor();\n  }\n\n  _setLink(url: string) {\n    let {editorState} = this.props;\n    let contentState = editorState.getCurrentContent();\n    let selection = editorState.getSelection();\n    let origSelection = selection;\n    let canApplyLink = false;\n\n    if (selection.isCollapsed()) {\n      let entity = this._getEntityDescriptionAtCursor();\n      if (entity) {\n        canApplyLink = true;\n        selection = selection.merge({\n          anchorOffset: entity.startOffset,\n          focusOffset: entity.endOffset,\n          isBackward: false,\n        });\n      }\n    } else {\n      canApplyLink = true;\n    }\n\n    this.setState({showLinkInput: false});\n    if (canApplyLink) {\n      contentState = contentState.createEntity(ENTITY_TYPE.LINK, 'MUTABLE', {url});\n      let entityKey = contentState.getLastCreatedEntityKey();\n\n      editorState = EditorState.push(editorState, contentState);\n      editorState = RichUtils.toggleLink(editorState, selection, entityKey);\n      editorState = EditorState.acceptSelection(editorState, origSelection);\n\n      this.props.onChange(editorState);\n    }\n    this._focusEditor();\n  }\n\n  _removeLink() {\n    let {editorState} = this.props;\n    let entity = getEntityAtCursor(editorState);\n    if (entity != null) {\n      let {blockKey, startOffset, endOffset} = entity;\n      this.props.onChange(\n        clearEntityForRange(editorState, blockKey, startOffset, endOffset)\n      );\n    }\n  }\n\n  _getEntityDescriptionAtCursor(): ?EntityDescription {\n    let {editorState} = this.props;\n    return getEntityAtCursor(editorState);\n  }\n\n  _getEntityAtCursor(): ?Entity {\n    let {editorState} = this.props;\n    let contentState = editorState.getCurrentContent();\n    let entity = getEntityAtCursor(editorState);\n    return (entity == null) ? null : contentState.getEntity(entity.entityKey);\n  }\n\n  _getCurrentBlockType(): string {\n    let {editorState} = this.props;\n    let selection = editorState.getSelection();\n    return editorState\n      .getCurrentContent()\n      .getBlockForKey(selection.getStartKey())\n      .getType();\n  }\n\n  _selectBlockType() {\n    this._toggleBlockType(...arguments);\n    this._focusEditor();\n  }\n\n  _toggleBlockType(blockType: string) {\n    this.props.onChange(\n      RichUtils.toggleBlockType(\n        this.props.editorState,\n        blockType\n      )\n    );\n  }\n\n  _toggleInlineStyle(inlineStyle: string) {\n    this.props.onChange(\n      RichUtils.toggleInlineStyle(\n        this.props.editorState,\n        inlineStyle\n      )\n    );\n  }\n\n  _undo() {\n    let {editorState} = this.props;\n    this.props.onChange(\n      EditorState.undo(editorState)\n    );\n  }\n\n  _redo() {\n    let {editorState} = this.props;\n    this.props.onChange(\n      EditorState.redo(editorState)\n    );\n  }\n\n  _focusEditor() {\n    // Hacky: Wait to focus the editor so we don't lose selection.\n    setTimeout(() => {\n      this.props.focusEditor();\n    }, 50);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}