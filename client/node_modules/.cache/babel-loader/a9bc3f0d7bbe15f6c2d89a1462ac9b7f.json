{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\src\\\\core\\\\pages\\\\Lesson\\\\UserOptions.js\";\nimport React, { useState, useEffect, Fragment } from 'react'; // import Layout from '../core/Layout';\n\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { isAuth, getCookie } from '../../../auth/helpers';\nimport { Card, Button } from 'react-bootstrap';\n\nconst UserNotes = ({\n  history\n}) => {\n  const _useState = useState({\n    title: \"\",\n    category: \"\",\n    body: \"\",\n    UserId: \"\",\n    LessonId: \"\",\n    NoteId: \"\",\n    showHideEdit: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        values = _useState2[0],\n        setValues = _useState2[1];\n\n  const token = getCookie('token');\n  useEffect(() => {\n    loadProfile();\n  }, []);\n\n  const handleChange = name => event => {\n    setValues(_objectSpread({}, values, {\n      title: title,\n      category: category,\n      body: body,\n      bookcategory: bookcategory,\n      [name]: event.target.value\n    }));\n  };\n\n  const loadProfile = () => {\n    //grabbing the URL from the window\n    const URLarray = window.document.URL.split(\"/\");\n    const URLarrVar = URLarray[URLarray.length - 1];\n    const URL_id = URLarrVar.split(\"?\"); //GET the correct logged user\n\n    axios({\n      method: 'GET',\n      url: `${process.env.REACT_APP_API}/user/${isAuth()._id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      //set all the values of the user\n      console.log(\"URLid\", URL_id[0]);\n\n      if (response.data.notes.length === 0) {//if the user has notes identify if there are notes that belong to this lesson\n      } else {\n        const user = response.data._id;\n        response.data.notes.map(note => {\n          if (note.Lesson_id === URL_id[0]) {\n            setValues(_objectSpread({}, values, {\n              NoteId: note._id,\n              title: note.title,\n              category: note.category,\n              body: note.body\n            })); //notes that do not belong to this lesson are reported in console.\n          }\n        });\n      } // //if the user has 0 bookmarks return nothing\n      // if (response.data.bookmarks.length === 0) {\n      //     console.log(\"Lesson was not bookmarked\")\n      //     //if the user has bookmarks identify if there are bookmarks that belong to this lesson\n      // } else {\n      //     response.data.bookmarks.map( bookmark => {\n      //         if (response.data.bookmark.Lesson_id === LessonId) {\n      //             setValues({ ...values, bookcategory: bookmark.category, isBookmarked: true, UserId: response.data._id})\n      //             //bookmakrs that belong to this lesson are reported in console.\n      //         }\n      //     })\n      // }\n\n    });\n  };\n\n  const NoteId = values.NoteId,\n        title = values.title,\n        category = values.category,\n        body = values.body,\n        bookcategory = values.bookcategory; //show notes in form\n\n  const handleEditNotes = () => {\n    return React.createElement(Card, {\n      style: {\n        width: '18rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Card.Img, {\n      variant: \"top\",\n      src: \"holder.js/100px180\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Card Title\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Some quick example text to build on the card title and make up the bulk of the card's content.\"), React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Go somewhere\"))) // <div>\n    //     <form>\n    //         <input placeholder={\"Title: \" + title} onChange={handleChange('title')} type=\"text\" name=\"title\" className=\"form-control\" id=\"title\"></input>\n    //         <input placeholder={\"Category: \" + category} onChange={handleChange('category')} name=\"category\" type=\"text\" className=\"form-control\" id=\"category\"></input>\n    //         <textarea className='note-textbox' onChange={handleChange('body')} id=\"bodyNotes\" name=\"body\">{body}</textarea>\n    //         <button className=\"btn btn-warning\" onClick={() => handleSubmitEdit()} type=\"submit\">Submit Edit</button>\n    //     </form>\n    //     <button type=\"button\" className=\"btn btn-warning deleteNote-btn\" onClick={() => RemoveNote()}>Delete Note</button>\n    // </div>\n    ;\n  }; //convert to date\n\n\n  const convertDate = date => {\n    let arr1 = date.split(\"T\");\n    let arr2 = arr1[0].split(\"-\");\n    let dateyear = arr2[2] + \", \" + arr2[0];\n\n    switch (arr2[1]) {\n      case '01':\n        return \"Jan. \" + dateyear;\n        break;\n\n      case '02':\n        return \"Feb. \" + dateyear;\n        break;\n\n      case '03':\n        return \"March \" + dateyear;\n        break;\n\n      case '04':\n        return \"Apr. \" + dateyear;\n        break;\n\n      case '05':\n        return \"May \" + dateyear;\n        break;\n\n      case '06':\n        return \"June \" + dateyear;\n        break;\n\n      case '07':\n        return \"July \" + dateyear;\n        break;\n\n      case '08':\n        return \"Aug. \" + dateyear;\n        break;\n\n      case '09':\n        return \"Sept. \" + dateyear;\n        break;\n\n      case '10':\n        return \"Oct. \" + dateyear;\n        break;\n\n      case '11':\n        return \"Nov. \" + dateyear;\n        break;\n\n      case '12':\n        return \"Dec. \" + dateyear;\n        break;\n    }\n  };\n\n  const RemoveNote = Note_id => {\n    axios({\n      method: 'DELETE',\n      url: `${process.env.REACT_APP_API}/notes/` + Note_id,\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(response => {\n      console.log('Note was deleted', response);\n    });\n  }; //handle all edits to the notes as a POST\n\n\n  const handleSubmitEdit = () => {\n    const URLarray = window.document.URL.split(\"/\");\n    const URLarrVar = URLarray[URLarray.length - 1];\n    const URL_id = URLarrVar.split(\"?\");\n    axios({\n      method: 'GET',\n      url: `${process.env.REACT_APP_API}/user/${isAuth()._id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      const userId = response.data._id;\n      alert(userId);\n      axios({\n        method: \"POST\",\n        url: process.env.REACT_APP_API + '/user/note/' + URL_id[0],\n        headers: {\n          Authorization: 'Bearer ' + token\n        },\n        data: {\n          Lesson_id: URL_id[0],\n          title: title,\n          category: category,\n          body: body,\n          User_id: userId,\n          _id: NoteId\n        }\n      }).then(response => {\n        console.log(title, body, category);\n        alert(\"Never stop!\");\n      });\n    });\n  }; //toggle to show notes\n\n\n  const getUserNote = () => {\n    console.log(\"You are looking for the notes!\");\n  }; //toggle to addBookmark\n\n\n  const addBookmark = () => {\n    console.log(\"Bookmark time!\");\n  }; //form for handling the note changes\n\n\n  const takeNotes = noteBody => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Title: \" + title,\n      onChange: handleChange('title'),\n      type: \"text\",\n      name: \"title\",\n      className: \"form-control\",\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      placeholder: \"Category: \" + category,\n      onChange: handleChange('category'),\n      name: \"category\",\n      type: \"text\",\n      className: \"form-control\",\n      id: \"category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      className: \"note-textbox\",\n      onChange: handleChange('body'),\n      id: \"bodyNotes\",\n      name: \"body\",\n      placeholder: noteBody.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: () => handleSubmitEdit(),\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Submit Edit\")), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-warning deleteNote-btn\",\n      onClick: () => RemoveNote(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Delete Note\"));\n  }; // what the user is viewing\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"noteContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, takeNotes({\n    body\n  })), React.createElement(\"img\", {\n    src: '/images/notes.png',\n    onClick: getUserNote,\n    alt: \"notes\",\n    id: \"notesLessons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }));\n};\n\nexport default UserNotes;","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/core/pages/Lesson/UserOptions.js"],"names":["React","useState","useEffect","Fragment","axios","isAuth","getCookie","Card","Button","UserNotes","history","title","category","body","UserId","LessonId","NoteId","showHideEdit","values","setValues","token","loadProfile","handleChange","name","event","bookcategory","target","value","URLarray","window","document","URL","split","URLarrVar","length","URL_id","method","url","process","env","REACT_APP_API","_id","headers","Authorization","then","response","console","log","data","notes","user","map","note","Lesson_id","handleEditNotes","width","convertDate","date","arr1","arr2","dateyear","RemoveNote","Note_id","handleSubmitEdit","userId","alert","User_id","getUserNote","addBookmark","takeNotes","noteBody"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\r\n// import Layout from '../core/Layout';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport { isAuth, getCookie } from '../../../auth/helpers';\r\nimport { Card, Button } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst UserNotes = ({ history }) => {\r\n    const [values, setValues] = useState({\r\n        title: \"\",\r\n        category: \"\",\r\n        body: \"\",\r\n        UserId: \"\",\r\n        LessonId: \"\",\r\n        NoteId: \"\",\r\n        showHideEdit: false\r\n    });\r\n\r\n    const token = getCookie('token');\r\n\r\n    useEffect(() => {\r\n        loadProfile();\r\n    }, []);\r\n\r\n    const handleChange = (name) => event => {\r\n        setValues({ ...values, title: title, category: category, body: body, bookcategory: bookcategory, [name]: event.target.value })\r\n    }\r\n\r\n    const loadProfile = () => {\r\n        //grabbing the URL from the window\r\n        const URLarray = window.document.URL.split(\"/\")\r\n        const URLarrVar = URLarray[URLarray.length - 1]\r\n        const URL_id = URLarrVar.split(\"?\")\r\n\r\n        //GET the correct logged user\r\n        axios({\r\n            method: 'GET',\r\n            url: `${process.env.REACT_APP_API}/user/${isAuth()._id}`,\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n            .then(response => {\r\n                //set all the values of the user\r\n                console.log(\"URLid\", URL_id[0])\r\n                if (response.data.notes.length === 0) {\r\n                    //if the user has notes identify if there are notes that belong to this lesson\r\n                } else {\r\n                    const user = response.data._id\r\n                    response.data.notes.map(note => {\r\n                        if (note.Lesson_id === URL_id[0]) {\r\n\r\n                            setValues({ ...values, NoteId: note._id, title: note.title, category: note.category, body: note.body })\r\n                            //notes that do not belong to this lesson are reported in console.\r\n                        }\r\n                    })\r\n                }\r\n                // //if the user has 0 bookmarks return nothing\r\n                // if (response.data.bookmarks.length === 0) {\r\n                //     console.log(\"Lesson was not bookmarked\")\r\n                //     //if the user has bookmarks identify if there are bookmarks that belong to this lesson\r\n                // } else {\r\n                //     response.data.bookmarks.map( bookmark => {\r\n                //         if (response.data.bookmark.Lesson_id === LessonId) {\r\n                //             setValues({ ...values, bookcategory: bookmark.category, isBookmarked: true, UserId: response.data._id})\r\n                //             //bookmakrs that belong to this lesson are reported in console.\r\n                //         }\r\n                //     })\r\n                // }\r\n\r\n            })\r\n    };\r\n\r\n    const { NoteId, title, category, body, bookcategory } = values;\r\n\r\n    //show notes in form\r\n    const handleEditNotes = () => {\r\n        return (\r\n            <Card style={{ width: '18rem' }}>\r\n  <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\r\n  <Card.Body>\r\n    <Card.Title>Card Title</Card.Title>\r\n    <Card.Text>\r\n      Some quick example text to build on the card title and make up the bulk of\r\n      the card's content.\r\n    </Card.Text>\r\n    <Button variant=\"primary\">Go somewhere</Button>\r\n  </Card.Body>\r\n</Card>\r\n            // <div>\r\n            //     <form>\r\n            //         <input placeholder={\"Title: \" + title} onChange={handleChange('title')} type=\"text\" name=\"title\" className=\"form-control\" id=\"title\"></input>\r\n            //         <input placeholder={\"Category: \" + category} onChange={handleChange('category')} name=\"category\" type=\"text\" className=\"form-control\" id=\"category\"></input>\r\n            //         <textarea className='note-textbox' onChange={handleChange('body')} id=\"bodyNotes\" name=\"body\">{body}</textarea>\r\n            //         <button className=\"btn btn-warning\" onClick={() => handleSubmitEdit()} type=\"submit\">Submit Edit</button>\r\n            //     </form>\r\n            //     <button type=\"button\" className=\"btn btn-warning deleteNote-btn\" onClick={() => RemoveNote()}>Delete Note</button>\r\n            // </div>\r\n        )\r\n    }\r\n\r\n    //convert to date\r\n    const convertDate = (date) => {\r\n        let arr1 = date.split(\"T\")\r\n        let arr2 = arr1[0].split(\"-\")\r\n        let dateyear = arr2[2] + \", \" + arr2[0];\r\n        switch (arr2[1]) {\r\n            case '01': return \"Jan. \" + dateyear;\r\n                break;\r\n            case '02': return \"Feb. \" + dateyear;\r\n                break;\r\n            case '03': return \"March \" + dateyear;\r\n                break;\r\n            case '04': return \"Apr. \" + dateyear;\r\n                break;\r\n            case '05': return \"May \" + dateyear;\r\n                break;\r\n            case '06': return \"June \" + dateyear;\r\n                break;\r\n            case '07': return \"July \" + dateyear;\r\n                break;\r\n            case '08': return \"Aug. \" + dateyear;\r\n                break;\r\n            case '09': return \"Sept. \" + dateyear;\r\n                break;\r\n            case '10': return \"Oct. \" + dateyear;\r\n                break;\r\n            case '11': return \"Nov. \" + dateyear;\r\n                break;\r\n            case '12': return \"Dec. \" + dateyear;\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    const RemoveNote = (Note_id) => {\r\n        axios({\r\n            method: 'DELETE',\r\n            url: `${process.env.REACT_APP_API}/notes/` + Note_id,\r\n            headers: {\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        })\r\n            .then(response => {\r\n                console.log('Note was deleted', response);\r\n            });\r\n    }\r\n\r\n    //handle all edits to the notes as a POST\r\n    const handleSubmitEdit = () => {\r\n        const URLarray = window.document.URL.split(\"/\")\r\n        const URLarrVar = URLarray[URLarray.length - 1]\r\n        const URL_id = URLarrVar.split(\"?\")\r\n        axios({\r\n            method: 'GET',\r\n            url: `${process.env.REACT_APP_API}/user/${isAuth()._id}`,\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n            .then(response => {\r\n                const userId = response.data._id\r\n                alert(userId)\r\n                axios({\r\n                    method: \"POST\",\r\n                    url: process.env.REACT_APP_API + '/user/note/' + URL_id[0],\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + token\r\n                    },\r\n                    data: { Lesson_id: URL_id[0], title: title, category: category, body: body, User_id: userId, _id: NoteId }\r\n                }).then(response => {\r\n                    console.log(title, body, category)\r\n                    alert(\"Never stop!\")\r\n                })\r\n            })\r\n    }\r\n\r\n    //toggle to show notes\r\n    const getUserNote = () => {\r\n        console.log(\"You are looking for the notes!\")\r\n    }\r\n\r\n    //toggle to addBookmark\r\n    const addBookmark = () => {\r\n        console.log(\"Bookmark time!\")\r\n    }\r\n\r\n    //form for handling the note changes\r\n    const takeNotes = (noteBody) => {\r\n\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <input placeholder={\"Title: \" + title} onChange={handleChange('title')} type=\"text\" name=\"title\" className=\"form-control\" id=\"title\"></input>\r\n                    <input placeholder={\"Category: \" + category} onChange={handleChange('category')} name=\"category\" type=\"text\" className=\"form-control\" id=\"category\"></input>\r\n                    <textarea className='note-textbox' onChange={handleChange('body')} id=\"bodyNotes\" name=\"body\" placeholder={noteBody.body}></textarea>\r\n\r\n                    <button className=\"btn btn-warning\" onClick={() => handleSubmitEdit()} type=\"submit\">Submit Edit</button>\r\n                </form>\r\n                <button type=\"button\" className=\"btn btn-warning deleteNote-btn\" onClick={() => RemoveNote()}>Delete Note</button>\r\n            </div>\r\n        )\r\n    }\r\n    // what the user is viewing\r\n    return (\r\n        <div>\r\n            <div className=\"noteContainer\">\r\n                {takeNotes({ body })}\r\n            </div>\r\n            <img src={'/images/notes.png'} onClick={getUserNote} alt=\"notes\" id=\"notesLessons\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserNotes;"]},"metadata":{},"sourceType":"module"}