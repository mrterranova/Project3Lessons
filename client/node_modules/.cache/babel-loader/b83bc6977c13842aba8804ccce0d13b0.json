{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\MERN Passport\\\\client\\\\src\\\\core\\\\pages\\\\Admin\\\\components\\\\DraftLesson.js\";\nimport React, { Component } from 'react';\nimport { EditorState, convertToRaw, convertFromRaw } from 'draft-js';\nimport Editor from 'draft-js-plugins-editor-wysiwyg';\nimport { DefaultDraftBlockRenderMap } from 'draft-js';\nimport createPlugins from './create-plugins';\nimport { Map } from 'immutable';\n\nclass WysiwygEditor extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onChange = editorState => {\n      if (this.unmounted) return;\n      this.editorState = editorState;\n      this.setState({\n        editorState: Date.now()\n      });\n\n      if (this.props.onChange) {\n        this.batch(() => {\n          this._raw = convertToRaw(editorState.getCurrentContent());\n          this.props.onChange(this._raw, editorState);\n        });\n      }\n    };\n\n    this.focus = () => {\n      this.refs.editor.focus();\n    };\n\n    this.blockRendererFn = contentBlock => {\n      const blockTypes = this.props.blockTypes;\n      const type = contentBlock.getType();\n      return blockTypes && blockTypes[type] ? {\n        component: blockTypes[type]\n      } : undefined;\n    };\n\n    this.customBlockRendering = props => {\n      const blockTypes = props.blockTypes;\n      var newObj = {\n        'paragraph': {\n          element: 'div'\n        },\n        'unstyled': {\n          element: 'div'\n        },\n        'block-image': {\n          element: 'div'\n        },\n        'block-table': {\n          element: 'div'\n        }\n      };\n\n      for (var key in blockTypes) {\n        newObj[key] = {\n          element: 'div'\n        };\n      }\n\n      return Map(newObj);\n    };\n\n    this.batch = batch(200);\n    this.plugins = createPlugins(_props);\n    this.editorState = _props.value ? EditorState.push(EditorState.createEmpty(), convertFromRaw(_props.value)) : EditorState.createEmpty();\n    this.blockRenderMap = DefaultDraftBlockRenderMap.merge(this.customBlockRendering(_props));\n    this.state = {};\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  shouldComponentUpdate(props, state) {\n    if (this.props.value !== props.value && this._raw !== props.value) {\n      this.editorState = !props.value ? EditorState.createEmpty() : EditorState.push(this.editorState, convertFromRaw(props.value));\n      return true;\n    } else if (this.state.active !== state.active || this.state.readOnly !== state.readOnly || this.state.editorState !== state.editorState) {\n      return true;\n    } else if (this.props.readOnly !== props.readOnly || this.props.fileDrag !== props.fileDrag || this.props.uploading !== props.uploading || this.props.percent !== props.percent) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const editorState = this.editorState;\n    const _this$props = this.props,\n          isDragging = _this$props.isDragging,\n          progress = _this$props.progress,\n          readOnly = _this$props.readOnly;\n    return React.createElement(Editor, {\n      readOnly: readOnly,\n      editorState: editorState,\n      plugins: this.plugins,\n      blockRenderMap: this.blockRenderMap,\n      blockRendererFn: this.blockRendererFn,\n      onChange: this.onChange,\n      ref: \"editor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default WysiwygEditor;\n\nconst batch = (limit = 500) => {\n  var _callback = null;\n  return callback => {\n    _callback = callback;\n    setTimeout(() => {\n      if (_callback === callback) {\n        callback();\n      }\n    }, limit);\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/MERN Passport/client/src/core/pages/Admin/components/DraftLesson.js"],"names":["React","Component","EditorState","convertToRaw","convertFromRaw","Editor","DefaultDraftBlockRenderMap","createPlugins","Map","WysiwygEditor","constructor","props","onChange","editorState","unmounted","setState","Date","now","batch","_raw","getCurrentContent","focus","refs","editor","blockRendererFn","contentBlock","blockTypes","type","getType","component","undefined","customBlockRendering","newObj","element","key","plugins","value","push","createEmpty","blockRenderMap","merge","state","componentWillUnmount","shouldComponentUpdate","active","readOnly","fileDrag","uploading","percent","render","isDragging","progress","limit","_callback","callback","setTimeout"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {EditorState, convertToRaw, convertFromRaw} from 'draft-js';\r\nimport Editor from 'draft-js-plugins-editor-wysiwyg';\r\nimport {DefaultDraftBlockRenderMap} from 'draft-js';\r\nimport createPlugins from './create-plugins';\r\nimport {Map} from 'immutable';\r\n\r\nclass WysiwygEditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.batch = batch(200);\r\n    this.plugins = createPlugins(props);\r\n    this.editorState = props.value\r\n      ? EditorState.push(EditorState.createEmpty(), convertFromRaw(props.value))\r\n      : EditorState.createEmpty();\r\n\r\n    this.blockRenderMap = DefaultDraftBlockRenderMap.merge(\r\n      this.customBlockRendering(props)\r\n    );\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.unmounted = true;\r\n  }\r\n\r\n  shouldComponentUpdate(props, state) {\r\n    if (this.props.value !== props.value && this._raw !== props.value) {\r\n      this.editorState = !props.value\r\n        ? EditorState.createEmpty()\r\n        : EditorState.push(this.editorState, convertFromRaw(props.value));\r\n      return true;\r\n    } else if (this.state.active !== state.active\r\n      || this.state.readOnly !== state.readOnly\r\n      || this.state.editorState !== state.editorState) {\r\n      return true;\r\n    } else if (this.props.readOnly !== props.readOnly\r\n      || this.props.fileDrag !== props.fileDrag\r\n      || this.props.uploading !== props.uploading\r\n      || this.props.percent !== props.percent) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onChange = (editorState) => {\r\n    if (this.unmounted) return;\r\n    this.editorState = editorState;\r\n    this.setState({editorState: Date.now()});\r\n\r\n    if (this.props.onChange) {\r\n      this.batch(() => {\r\n        this._raw = convertToRaw(editorState.getCurrentContent());\r\n        this.props.onChange(this._raw, editorState);\r\n      });\r\n    }\r\n  };\r\n\r\n  focus = () => {\r\n    this.refs.editor.focus();\r\n  };\r\n\r\n  blockRendererFn = contentBlock => {\r\n    const {blockTypes} = this.props;\r\n    const type = contentBlock.getType();\r\n    return blockTypes && blockTypes[type] ? {\r\n      component: blockTypes[type]\r\n    } : undefined;\r\n  }\r\n\r\n  customBlockRendering = props => {\r\n    const {blockTypes} = props;\r\n    var newObj = {\r\n      'paragraph': {\r\n        element: 'div',\r\n      },\r\n      'unstyled': {\r\n        element: 'div',\r\n      },\r\n      'block-image': {\r\n        element: 'div',\r\n      },\r\n      'block-table': {\r\n        element: 'div',\r\n      }\r\n    };\r\n    for (var key in blockTypes) {\r\n      newObj[key] = {\r\n        element: 'div'\r\n      };\r\n    }\r\n    return Map(newObj);\r\n  }\r\n\r\n  render() {\r\n    const {editorState} = this;\r\n    const {isDragging, progress, readOnly} = this.props;\r\n\r\n    return (\r\n      <Editor readOnly={readOnly} editorState={editorState}\r\n              plugins={this.plugins}\r\n              blockRenderMap={this.blockRenderMap}\r\n              blockRendererFn={this.blockRendererFn}\r\n              onChange={this.onChange}\r\n              ref=\"editor\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default WysiwygEditor;\r\n\r\nconst batch = (limit=500) => {\r\n  var _callback = null;\r\n  return (callback) => {\r\n    _callback = callback;\r\n    setTimeout(() => {\r\n      if (_callback === callback) {\r\n        callback();\r\n      }\r\n    }, limit);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}